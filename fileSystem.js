
// This file is auto-generated by a Python script.
// Do not edit it directly.

const fileSystem = {
    'type': 'dir',
    'children': {
    "cv.md": {
        "type": "file",
        "content": ".5\n\n**[Emily M. Boudreaux (they/she)](https://www.emilyboudreaux.com)**\n\n.5\n\nDartmouth College, Hanover NH, 03784\n\n.5\n\nDepartment of Physics and Astronomy\n\n.5\n\nHB 6127\n\n.5\n\nemily\\@boudreauxmail.com\n\nRESEARCH INTERESTS\n==================\n\nComputational astrophysics, stellar evolution, low mass stars.\n\nJOBS\n====\n\n-   **Dartmouth College**, May 2024 - present\\\n    Post Doctoral Research Associate working with [Aaron\n    Dotter](https://aarondotter.github.io/) on\n    [4D-STAR](https://fys.kuleuven.be/ster/research-projects/4d-star)\n\n-   **Dartmouth College**, May 2024 - present\\\n    Lecturer\n\nEDUCATION\n=========\n\nDartmouth College Hanover, NH\\\n\u00a0\u00a0*Master of Science* --- Physics & Astronomy May 2022\\\n\u00a0\u00a0\u00a0\u00a0Advisor: [Dr. Brian C.\nChaboyer](https://physics.dartmouth.edu/people/brian-charles-chaboyer)\\\n\u00a0\u00a0\u00a0\u00a0Secondary Advisor: [Dr. Elisabeth R.\nNewton](https://physics.dartmouth.edu/people/elisabeth-newton)\\\n\u00a0\u00a0*Doctor of Philosophy* ---- Physics & Astronomy April 2024\\\n\u00a0\u00a0\u00a0\u00a0Thesis: [Models of Low Mass Stars as Physical\nLaboratories](https://raw.githubusercontent.com/tboudreaux/thesis/master/thesis/Thesis.pdf)\\\n\u00a0\u00a0\u00a0\u00a0Advisor: [Dr. Brian C.\nChaboyer](https://physics.dartmouth.edu/people/brian-charles-chaboyer)\\\n\u00a0\u00a0\u00a0\u00a0Commitee: Dr. Aaron Dotter, Dr. Elisabeth R. Newton, Dr. Jamie\nTayar\\\nHigh Point University High Point, NC\\\n\u00a0\u00a0*Bachelor of Science*, **summa cum laude** --- Computational Physics\nMay 2019\\\n\u00a0\u00a0\u00a0\u00a0Advisor: [Brad N. Barlow](https://tarheels.live/bbarlow/)\\\n\nPUBLICATIONS\n============\n\nFirst Author\n------------\n\n-   **Boudreaux, E.M.**, Garcia Soto, Aylin., Chaboyer, B.C., 2024.\n    [Correlations between Ca II H&K Emission and the Gaia M dwarf\n    Gap](https://ui.adsabs.harvard.edu/abs/2024arXiv240214984B/abstract),\n    *The Astrophysical Journal*. 965(1), p.56\n\n-   **Boudreaux, E.M.**, Chaboyer, B.C., Ash, Amanda., Edaes Hoh,\n    Renata., Feiden, Gregory., 2024. [Chemically Self-Consitent Modeling\n    of the Globular Cluster NGC 2808 and its Effects on the Inferred\n    Helium abundance of Multiple Stellar\n    Populations](https://ui.adsabs.harvard.edu/abs/2024arXiv241117562B/abstract),\n    *The Astrophysical Journal*. 980(1), p.180\n\n-   **Boudreaux, E.M.**, Chaboyer, B.C., 2023. [Updated High-Temperature\n    Opacties for the Dartmouth Stellar Evolution Program and their\n    Effect on the Jao Gap\n    Location](https://ui.adsabs.harvard.edu/abs/2023arXiv230110798B/abstract),\n    *The Astrophysical Journal*. 944(2), p.129\n\n-   **Boudreaux, E.M.**, Newton, E.R., Mondrik, N., Charbonneau, D.,\n    Irwin, J., 2021. [The Ca II H&K Rotation-Activity Relation in 53\n    mid-to-late type\n    M-Dwarfs](https://ui.adsabs.harvard.edu/abs/2022ApJ...929...80B/abstract),\n    *The Astrophysical Journal*. 926(1), p.80\n\n-   **Boudreaux, T. M.**, 2017, \"[The applications of deep neural\n    networks to sdBV\n    classification](https://ui.adsabs.harvard.edu/#abs/2017OAst...26..258B/abstract)\",\n    *Open Astronomy*, **26**, 258.\n\n-   **Boudreaux, E. M.**, Barlow, B. N., Fleming, S. W., Soto, A. V.,\n    Million, C., Reichart, D. E., Haislip, J. B., Linder, T. R.,\n    Moore, J. P., 2017. \"[A search for rapidly pulsating hot subdwarf\n    stars in the GALEX\n    survey](https://ui.adsabs.harvard.edu/#abs/2017ApJ...845..171B/abstract)\",\n    *Astrophysical Journal*, **845**, 171.\n\nContributing Author\n-------------------\n\n-   Ying, M., Chaboyer, B., **Boudreaux, E.M.**, Slaughter, C.,\n    Boylan-Kolchin, M., Wesiz, D., [The Absolute Age of\n    M92.](https://ui.adsabs.harvard.edu/abs/2023AJ....166...18Y/abstract)\n    *The Astronomical Journal*, 166(1), p.18.\n\n-   Guidry, J.A., Vanderbosch, Z.P., Hermes, J.J., Barlow, B.N., Lopez,\n    I.D., **Boudreaux, E.M.**, Corcoran, K.A., Bell, K.J., Montgomery,\n    M.H., Heintz, T.M. and Castanheira, B.G., 2021. [I Spy Transits and\n    Pulsations: Empirical Variability in White Dwarfs Using Gaia and the\n    Zwicky Transient\n    Facility.](https://ui.adsabs.harvard.edu/abs/2021ApJ...912..125G/abstract)\n    *The Astrophysical Journal*, 912(2), p.125.\n\n-   Vos, J., Vuc\u0306kovic\u0300, M., Chen, X., Han, Z., **Boudreaux, E. M.**,\n    Barlow, B. N., \u00d8stensen, R., N\u00e8meth, P., 2019, \"[The orbital period\n    --- mass ratio relation of wide sdB+MS binaries and its application\n    to the stability of\n    RLOF.](https://ui.adsabs.harvard.edu/#abs/2019MNRAS.482.4592V/abstract)\\\",\n    *Monthly Notices of The Royal Astronomical Society*, **482**, 4592\n\nCOMPUTING SKILLS\n================\n\n-   *Programming Languages:*\n\n    1.  *Expert:* Python, C, C++(11/17/20/23), Fortran (77/90)\n\n    2.  *Comfortable:* Arduino, PHP, JavaScript, Mathematica\n\n    3.  *Familiar:* Go, Rust\n\n-   *Numerical Tools:* Finite Element Modeling (MFEM, deal.II)\n\n-   *Web Backend Technologies:* Flask, MongoDB, MySQL, MariaDB\n\n-   *Misc:* Period04, Docker, GitHub, ZFS, LaTeX, Bash, Zsh\n\nINTERNSHIPS\n===========\n\n-   **Harvard Smithsonian Astrophysical Observatory**, 2018\\\n    Harvard SAO REU Student\n\n-   **Space Telescope Science Institute**, 2016\\\n    SASP Summer Intern\n\nAWARDS & HONORS\n===============\n\n-   **Dartmouth College Department of Physics & Astronomy** 2024\\\n    Selamawit Tsehaye Teaching Award\n\n-   **Dartmouth College Department of Physics & Astronomy** 2019\\\n    Department Chair Fellowship\n\n-   **The National Science Foundation**, 2019\\\n    Graduate Record Fellowship Program Honorable Mention\n\n-   **High Point University**, 2019\\\n    University Award for Highest Achievement\n\n-   **High Point University Honors Scholar Program**, 2019\\\n    All University Honors\n\n-   **The Barry Goldwater Scholarship and Excellence in Education\n    Foundation**, 2018\\\n    Goldwater Scholar in Mathematics, Science, and Engineering\n\n-   **High Point University Department of Physics**, 2018\\\n    Endowed Scholarship\n\n-   **National Collegiate Honors Council**, 2018\\\n    Portz Scholarship\n\n-   **Sigma Xi, The Scientific Research Honors Society**, 2018\\\n    Elected Associate Member\n\n-   **Sigma Pi Sigma, National Physics Honor Society**, 2018\\\n    Elected Member\n\n-   **The Barry Goldwater Scholarship and Excellence in Education\n    Foundation**, 2017\\\n    Honorable Mention for excellence in Mathematics, Science, and\n    Engineering\n\n-   **High Point University**, 2015--2019\\\n    Presidential Scholarship\n\nSELECTED ORAL PRESENTATIONS\n===========================\n\n-   **Sixth Challenges and Innovations in Computational Astrophysics**,\n    2025 (upcoming), ISER Mohali,\u00a0India\\\n    \"New Dimensions in Stellar Structure and Evolution.\" \\[Invited\\]\n\n-   **Twelfth Annual Meeting on Hot Subdwarfs and Related Objects**,\n    2025 (upcoming), Little Switzerland NC, USA\\\n    \"New Dimensions in Stellar Structure and Evolution.\"\n\n-   **National Collegiate Honors Council Annual Meeting**, 2018, Boston,\n    MA\\\n    \"The Applications of Deep Neural Networks to sdBV Classification\"\n    \\[Invited\\]\n\n-   **North Carolina Astronomers Meeting**, 2017, Greensboro, NC\\\n    \"The Applications of Deep Neural Networks to sdBV Classification\"\n\n-   **Eighth Annual Meeting on Hot Subdwarfs and Related Objects**,\n    2017, Krak\u00f2w, Poland\\\n    \"The Applications of Deep Neural Networks to sdBV Classification\"\n\n-   **High Point University Research and Creative Works Symposium**,\n    2017, High Point, NC\\\n    \"A Virtual Survey of all known Hot Subdwarfs -- searching for p-mode\n    pulsations with GALEX\"\n\n-   **Meeting of Astronomers in South Carolina**, 2017, Greenville, SC\\\n    \"The Applications of Deep Neural Networks to Time Domain\n    Astrophysics\"\n\nSELECTED POSTER PRESENTATIONS\n=============================\n\n-   **21st Meeting on Cool Stars**, 2022, Toulouse France\\\n    Updated High-Temperature Opacties for DSEP and Their Effect on the\n    Jao Gap Location\n\n-   **233rd Meeting of the American Astronomical Society**, 2019,\n    Seattle Washington\\\n    \"[A Journey to Mars: HPUniverse Day and Its Impact on Young Minds\n    and a\n    Community.](https://ui.adsabs.harvard.edu/#abs/2019AAS...23314705C/abstract)\"\n\n-   **233rd Meeting of the American Astronomical Society**, 2019,\n    Seattle Washington\\\n    \"[Effects of the Primordial Binary Fraction on the Evolution of\n    Globular\n    Clusters.](https://ui.adsabs.harvard.edu/#abs/2019AAS...23324909B/abstract)\"\n\n-   **231st Meeting of the American Astronomical Society**, 2018,\n    Washington D.C.\\\n    \"[Using Deep Learning to Analyze the Voices of\n    Stars.](https://ui.adsabs.harvard.edu/#abs/2018AAS...23115029B/abstract)\"\n\n-   **227th Meeting of the American Astronomical Society**, 2016,\n    Kissimmee, FL\\\n    \"[New Long Period Hot Subdwarfs from the Hobby-Eberly\n    Telescope](https://ui.adsabs.harvard.edu/#abs/2016AAS...22734412B/abstract)\"\n\nTEACHING EXPERIENCE Instructor of Record\n========================================\n\n-   **Dartmouth College**, Fall 2024\\\n    Astrophysics (*Astr(1)74*)\n\nTEACHING EXPERIENCE Teaching Staff\n==================================\n\n-   **High Point University**, 2016,2017\\\n    Multivariable Calculus (*MTH 2410*, SI)\n\n-   **Dartmouth College**, 2022\\\n    Advanced Stellar Astrophysics (*Astr 115*, TA)\n\n-   **Dartmouth College**, 2021,2022\\\n    Public Obsserving (TA)\n\n-   **Dartmouth College**, 2020\\\n    Introductory Mechanics (*Phys 13*, TA)\n\n-   **Dartmouth College**, 2020, 2023\\\n    Introductory Solar System Astronomy (*Astr 1*, TA, 7 Lectures)\n\n-   **Dartmouth College**, 2023\\\n    Stars and the Milky Way (*Astr 15*, TA)\n\n-   **Dartmouth College**, 2024\\\n    The Development of Astronomical Thought (*Astr 4*, TA)\n\nREFEREE SERVICE\n===============\n\n-   **The Astrophysical Journal, IOP**, 2025\n\n-   **Nature Physics, Nature Portfolio**, 2024\n\nMENTORSHIP & STUDENTS\n=====================\n\n-   **Renata Edaes Hoh**, **Dartmouth College, WISP**, 2022\\\n    Identifying zero point offsets between absolute and differential\n    photometry the globular cluster NGC 2808.\n\n-   **Mayumi Liz de Andrade Miyazato**, **Dartmouth College, WISP**,\n    2023\\\n    Identifying zero point offsets between absolute and differential\n    photometry the globular clusters NGC 6752 & 47 Tuc.\n\nSELECTED SOFTWARE\n=================\n\nAll of my software can be found on my\n[GitHub](https://github.com/tboudreaux) page.\n\n-   [OPAT](https://github.com/4D-STAR/opat-core) --- C++ and Python\n    interface for OPAT file format.\n\n-   [libmesac](https://github.com/4D-STAR/libmesac) --- C interface for\n    much of the MESA microphysics and numerical libraries\n\n-   [CoolDwarf](https://github.com/tboudreaux/CoolDwarf) --- Three\n    dimensional brown dwarf structure cooling model.\n\n-   [fidanka](https://github.com/tboudreaux/fidanka) --- Robust CMD\n    fiducial line extractor and isochrone fitter.\n\n-   [pyTOPSScrape](https://github.com/tboudreaux/pytopsscrape) ---\n    Custom python API for the Los Alamos OPLIB High-Temperature Opacties\n    tables.\n\n-   [mplEasyAnimate](https://github.com/tboudreaux/mpl_animate) ---\n    Simple and easy animation library for use with matplotlib.\n\n-   [pubPolishPy](https://github.com/tboudreaux/PubPolishPy) ---\n    Automatically rebuilt LaTeX project to target different journals.\n\n-   [splitAxes](https://github.com/tboudreaux/splitAxes) --- An easy way\n    to build complex split axes graphs in matplotlib.\n\n-   [PolytropicStellarModel](https://github.com/tboudreaux/PolytropicStellarModel)\n    --- A blazingly fast, GPU accelerated, polytrope solver.\n\nVOLUNTEER WORK\n==============\n\n-   **Dartmouth College**, 2024\\\n    Dartmouth Astronomy Night\n\n-   **Dartmouth College**, 2023--2024\\\n    Dartmouth Physics and Astronomy Graduate Curriculum Committee\n\n-   **Dartmouth College**, 2020,2021,2022,2023\\\n    Public Observing\n\n-   **The Hopkins Center for the Arts**, 2022\\\n    Pre-Movie Public Science Talk\n\n-   **Montshire Museum of Science**, 2020,2022,2023\\\n    Astronomy Day -- Comet Making, Ask an Astronomer, Star Clock\n\n-   **High Point University**, 2015,2016,2017,2018,2019\\\n    HPUniverse Day -- Finding Exoplanets\n\nRESEARCH PROJECTS\n=================\n\n-   Development of a next generation 3+1D Stellar Structure and\n    Evolution Program, 2024--\n\n-   The effects of OPLIB opacities and mutliple populations on the\n    location of the Red Giant Branch Bump, 2024--2025\n\n-   The Jao Gap width and location as a population age indicator,\n    2022--2024\n\n-   The effect of Opacties on the location of the Jap Gap, 2021--2023\n\n-   Modifying the Dartmouth Stellar Evolution Program to fully self\n    consistantly handel increased He abundance, 2020--2024\n\n-   The Ca II H&K Rotation-Activity Relation in 50 early-to-late type\n    M-dwarfs, 2019--2020.\n\n-   Effects of the Primordial Binary Fraction on Globular Cluster\n    Evolution, 2018\n\n-   Applications of Deep Learning to Classification of PTF Data, 2018\n\n-   Applications of Machine Learning to the Classification of Pulsating\n    Stars, 2017--2018\n\n-   A Search for Rapidly Pulsating Hot Subdwarfs in the GALEX Survey,\n    2016--2017\n\n-   Orbital Solution Analysis of Long Period sdB+F/G/K Binaries,\n    2015--2016\n"
    },
    "papers.md": {
        "type": "file",
        "content": "### First Author\n\n- Boudreaux, E.M., Garcia Soto, Aylin., Chaboyer, B.C., 2024. Correlations between Ca II H&K Emission and the Gaia M dwarf Gap, The Astrophysical Journal. 965(1), p.56\n\n- Boudreaux, E.M., Chaboyer, B.C., Ash, Amanda., Edaes Hoh, Renata., Feiden, Gregory., 2024. Chemically Self-Consitent Modeling of the Globular Cluster NGC 2808 and its Effects on the Inferred Helium abundance of Multiple Stellar Populations, The Astrophysical Journal. 980(1), p.180\n\n- Boudreaux, E.M., Chaboyer, B.C., 2023. Updated High-Temperature Opacities for the Dartmouth Stellar Evolution Program and their Effect on the Jao Gap Location, The Astrophysical Journal. 944(2), p.129\n\n- Boudreaux, E.M., Newton, E.R., Mondrik, N., Charbonneau, D., Irwin, J., 2021. The Ca II H&K Rotation-Activity Relation in 53 mid-to-late type M-Dwarfs, The Astrophysical Journal. 926(1), p.80\n\n- Boudreaux, T. M., 2017, \"The applications of deep neural networks to sdBV classification\", Open Astronomy, 26, 258.\n\n- Boudreaux, E. M., Barlow, B. N., Fleming, S. W., Soto, A. V., Million, C., Reichart, D. E., Haislip, J. B., Linder, T. R., Moore, J. P., 2017. \"A search for rapidly pulsating hot subdwarf stars in the GALEX survey\", Astrophysical Journal, 845, 171.\n\n### Contributing Author\n\n- Ying, M., Chaboyer, B., Boudreaux, E.M., Slaughter, C., Boylan-Kolchin, M., Wesiz, D., The Absolute Age of M92. The Astronomical Journal, 166(1), p.18.\n\n- Guidry, J.A., Vanderbosch, Z.P., Hermes, J.J., Barlow, B.N., Lopez, I.D., Boudreaux, E.M., et al., 2021. I Spy Transits and Pulsations: Empirical Variability in White Dwarfs Using Gaia and the Zwicky Transient Facility. The Astrophysical Journal, 912(2), p.125.\n\n- Vos, J., Vu\u010dkovi\u0107, M., Chen, X., Han, Z., Boudreaux, E. M., et al., 2019, \"The orbital period mass ratio relation of wide sdB+MS binaries and its application to the stability of RLOF.\", Monthly Notices of The Royal Astronomical Society, 482, 4592\n\n"
    },
    "projects": {
        "type": "dir",
        "children": {
            "CoolDwarf": {
                "type": "dir",
                "children": {
                    "readme.md": {
                        "type": "file",
                        "content": "![Cool Dwarf Logo](assets/logo/logo-medium.png)\n# CoolDwarf\n\nCoolDwarf is a dynamic brown dwarf cooling model meant to cover short time scales with high accuracy. That is to say \nthat CoolDwarf is not meant to trace cooling over gigayear, megayear, or even kiloyear timescales; rather, CoolDwarf is meant\nto trace cooling over minutes, hours, days, and year timescales. \n\nThe original reason for this project was to model the surface temperature profile of a brown dwarf + Mdwarf binary where\nthe M dwarf exhibits a high degree of XRay flux (from flares).\n\n\n## CoolDwarf is still *very* early in its development and should not be taken as a scientificly useful software yet!\n\nDevelopment is ongoing and I hope to have a realease within the next 6 months. \n\n## Installation\nIf you with to install CoolDwarf for testing or development I reccomend using virtual enviroment and installing\nusing pip\n\n```bash\ngit clone https://github.com/tboudreaux/CoolDwarf\ncd CoolDwarf\npip install . -e \n```\n\n## Documentation\nThe documentation for CoolDwarf may be found <a href=\"https://tboudreaux.github.io/CoolDwarf/\">here</a>\n\n\n"
                    }
                }
            },
            "Fidanka": {
                "type": "dir",
                "children": {
                    "readme.md": {
                        "type": "file",
                        "content": "<p align=\"center\">\n\t<img width=\"460\" height=\"460\" src=\"/assets/fidankaLogo.png\">\n</p>\n\n---\n\n<div align=\"center\">\n\n[![Python - Linux](https://github.com/tboudreaux/fidanka/actions/workflows/python-build.yml/badge.svg)](https://github.com/tboudreaux/fidanka/actions/workflows/python-build.yml)\n[![python](https://img.shields.io/badge/Python-3.9-3776AB.svg?style=flat&logo=python&logoColor=white?style=for-the-badge)](https://www.python.org)\n[![codecov](https://codecov.io/gh/tboudreaux/fidanka/branch/master/graph/badge.svg?token=DQ5CUJ7WNA)](https://codecov.io/gh/tboudreaux/fidanka)\n\n[![pre-commit](https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&logoColor=white)](https://github.com/pre-commit/pre-commit)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](http://makeapullrequest.com)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\n[![Forks](https://img.shields.io/github/forks/tboudreaux/fidanka.svg?style=for-the-badge)](https://github.com/tboudreaux/fidanka)\n[![Stars](https://img.shields.io/github/stars/tboudreaux/fidanka.svg?style=for-the-badge)](https://github.com/tboudreaux/fidanka)\n\n</div>\n\n---\n\n# Fidanka\nFidanka is an (hopefully) easy to use python package for doing science with globular clusters.\nWritten by Emily M. Boudreaux and Martin Ying.\n\n\n## Docs & Information\nThe full API Documentation can be found <a href=\"https://tboudreaux.github.io/fidanka/\">here</a>.\n\nA short presentation which I've given on fidanka may be found <a href=\"https://algebrist.ddns.net/~tboudreaux/presentations/VAST/#/\">here</a>\n\n## Install\n\n### PyPi\nFidnka will be avalible on PyPi soon; however, it is not currently avalible anywhere other than GitHub.\n\n### From Source (latest)\n\n```bash\ngit clone https://github.com/tboudreaux/fidanka.git\ncd fidanka\npip install .\n```\n\n### Development\nIn order to develop for fidanka it will be helpful to also install a few more packages. We also recommend you work in a virtual environment.\nMoreover, you must work in your own fork of fidanka and issue pull requests. First fork fidanka on GitHub.\n```bash\nconda create --name fidankaDev python=3\npip install pre-commit\npip install commitizen\ngit clone https://github.com/<your-username>/fidanka.git\npip install -e .\npre-commit install\npre-commit autoupdate\n```\nWhile use commitizen is not required when contributing, it is highly encouraged.\nIf you do use commitizen then the add commit workflow is as follows\n\n```bash\ngit add <files>\ncz c\n```\n\n## Contributing\nWe welcome any contributions made to this project. Please work in a fork and submit a pull request. We also request that you use the pre-commit hooks we have defined and commit using commitizen. This will help us keep a cleaner channelog. Finally, any contributors to this project are expected to behave in accordance with the code of conduct (code_of_conduct.md). Any violation of this will result in a ban on contributions and an evaluation of whether previous contributions should be purged.\n\n## Examples\n\n### Measuring the fiducial lines of a cluster with multiple populations\nAssuming you have your photometry stored in some data structure (here I retrieve it from a pickle\nas a pandas dataframe), and you have a prior that there are 2 populations within the\ncluster, you can measure those fiducial lines as follows\n\nThis measurement will re-sample the data 1000 times and remeasure the fiducial lines each time\nin order to get confidence intervals and a mean.\n```python\nfrom fidanka.fiducial import measure_fiducial_lines\nimport pickle as pkl\n\nPHOTROOT = \"photometry.pkl\"\nwith open(PHOTROOT, 'rb') as f:\n    photometry = pkl.load(f)[1]\n\nMC = 1000\nfiducialLine = measure_fiducial_lines(\n        photometry[\"F275W\"],\n        photometry[\"F814W\"],\n        photometry[\"F275W_RMS\"],\n        photometry[\"F814W_RMS\"],\n        reverseFilterOrder=True,\n        mcruns=MC,\n        nPops = 2\n        )\npopA = fiducialLine[0]\npopB = fiducialLine[1]\n\npopAMean = popA.mean\npopA5th = popA.confidence(0.05)\npopA95th = popA.confidence(0.95)\n\nwith open('fldump-sorted.pkl', 'wb') as f:\n    pkl.dump(fiducialLine, f)\n```\n\n### Fitting an Isochrone\n\nImagine a file called HUGS1.csv which contains photometry and can be read with\npandas for the globular cluster NGC 2808 in your current working directory.\nAlso imagine an isochrone called iso.txt (In the MIST format) in the current working directory. We\ncan fit that isochrone to the photometry as follows. Also imagine we still\nhave popA loaded from the previous example. Finally, imagine you have a series of bolometric\ncorrection tables in the current directory stored in a folder called \"bolTables\".\nThese tables should be in the format available on the MIST website.\n\n```python\nfrom fidanka.isochrone.MIST import read_iso\nfrom fidanka.isofit.fit import optimize\n\nimport pandas as pd\nimport re\nimport os\n\nbolFilenames = list(filter(lambda x: re.search(\"feh[mp]\\d+\", x), os.listdir(\"bolTables\")))\nbolPaths = list(map(lambda x: os.path.join(args.bTabs, x), bolFilenames))\nFeH = ...\n\nphotometry = pd.read_csv(\"HUGS1.csv\")\niso = read_iso(\"ISO/mist.iso\")\n\nfilter1 = photometry[\"F275W\"]\nfilter2 = photometry[\"F814W\"]\nerror1 = photometry[\"F275W_RMS\"]\nerror2 = photometry[\"F814W_RMS\"]\n\nbestFitResults = optimize(\n    popA.mean,\n    iso,\n    bolPaths,\n    FeH,\n    filters = (\"F275W\", \"F814W\", \"F814W\")\n)\n\nprint(bestFitResults)\n```\n\n### logging\nfidanka will write some information to stdout; however, more extensive information will be writte\nto a log file. By default this is called fidanka.log; however, its name and log level can be\nconfigured with the get_logger function\n\n```python\nfrom fidanka.misc.utils import get_logger\nimport logging\n\nget_logger(\"rootLoggerName\", \"testRun.log\", clevel=logging.INFO)\n```\n\nThis will result in much more information being written to std out. The first\nargument is the name of the logger module and can be whatever you like. The second\nis the filename for the file handler. There are also keyword arguments\nclevel, flevel, and level which control the minimum logger level to be written\nto the console, the file, and either respectively.\n\n\n### Population Synthethis\nAssume you have a series of isochrones loaded in a list and you want to generate\na 12.5Gyr cluster with 30000 members and a binary fraction of 0.25.\n\n```python\nfrom fidanka.population.synthesize import population\nfrom fidanka.fiducial.fiducial import measure_fiducial_line\n\n\nARTSTARTEST = \"ArtificialStarCalibratedErrorFunctions.pkl\"\nwith open(\"./RMSFuncs.pkl\", 'rb') as f:\n    rmsFuncs = pkl.load(f)\nwith open(ARTSTARTEST, 'rb') as f:\n    artStar = pkl.load(f)\n\n\ntargetAge = 12.5e9\nn = 30000\n\npop = population(\n    isos[:2],\n    -0.84,\n    0.25,\n    lambda x: x-x + targetAge,\n    n,\n    targetAge,\n    targetAge,\n    0.25,\n    2,\n    artStar,\n    9198,\n    0.17,\n    \"F606W\"\n)\n\n# Note that the population Synthesis runs when the code\n# gets here, NOT at population instantiation time\n# this can also be called with pop.data().\n# If this function is called multiple times the same results\n# will be returned for the same object as a cache is used\ndf = pop.to_pandas()\npop.to_csv(\"TestPop.csv\")\n```\n\n### Funding and Acknowledgements\nWe recongnize the support of NASA Grant No. 80NSSC18K0634 in the development of this software.\n\n"
                    }
                }
            },
            "GridFire": {
                "type": "dir",
                "children": {
                    "readme.md": {
                        "type": "file",
                        "content": "<p align=\"center\">\n  <img src=\"assets/logo/GridFire.png\" width=\"300\" alt=\"OPAT Core Libraries Logo\">\n</p>\n\n\n---\n\nGridFire is a C++ library designed to preform general nuclear network evolution using the reaclib library. It is a\npart of the larger SERiF project which is itself a part of the 4D-STAR collaboration. \n\n> Note that GridFire is still very early in development and is not ready for scientific use. The API is not stable and\n> the reults are not yet validated. We are actively working on improving the library and once it is tested and validated\n> we will release a stable version.\n\n## Design\n\nGridFire uses a \"graph-first\" design to represent the nuclear network. Specifically, internally the network is\nrepresented as a directed hypergraph where nodes are nuclides and edges are reactions. This design allows for very straightforward\nand efficient evolution of the network topology. \n\n## Current Features\n- **Reaclib Support**: GridFire uses reaclib coefficients statically compiled into the binary to evaluate reation rates. We bundle a script which can be used to generate the header files where these are stored. \n- **Auto Differentiation**: GridFire uses [CppAD](https://github.com/coin-or/CppAD) to generate analytic Jacobians for stiff network evaluation.\n- **Dynamic Network Topology**: GridFire supports dynamic network topology, allowing for the addition and removal of nuclides and reactions during runtime.\n- **Dynamic Stiff Detection**: GridFire uses a heuristic stiff detection algorithm to determine the stiffness of the network at runtime.\n\n## Planned Features\n### High Priority\n- **Reverse Reactions**: Currently, GridFire only supports forward reactions. Very soon we will add support for reverse reactions.\n- **Weak Reactions**: GridFire will eventually support weak reactions, allowing for a more complete nuclear network evolution.\n- **Python Bindings**: We plan to add Python bindings to GridFire, allowing for easy integration with Python-based workflows.\n\n### Low Priority\n- **GPU and Multi-Core Support**: We plan to add support for GPU and multi-core execution, allowing for faster network evolution.\n- **Topology Optimization**: We plan to add support for topology optimization, allowing for more efficient network evolution.\n- **Real-Time Network Visualization**: We plan to add support for real-time network visualization, allowing for better understanding of the network evolution.\n\n## Building\nGridFire uses meson as its build system. The minimum required version is 1.5.0. To build GridFire, you will need to have the following dependencies installed:\n\n- C++ compiler supporting at least C++20 (though we test against C++23, and it is **strongly** recommended to use C++23)\n- [Meson](https://mesonbuild.com/) build system (`apt install meson` or `brew install meson` or `pip install \"meson>=1.5.0\"`)\n- [Ninja](https://ninja-build.org/) build system (`apt install ninja-build` or `brew install ninja` or `pip install ninja`)\n- (_optional to have preinstalled_) [Boost](https://www.boost.org/) libraries (`apt install libboost-all-dev` or `brew install boost`)\n\nBoost is labeled as optional because if GridFire cannot find boost during installation it will ask the user if they want\nto install it, and then it will take care of that insallation. \n\nOnce at least the C++ compiler, meson, and ninja are installed, you can build GridFire by running the following commands in the root directory of the repository:\n\n```bash\nmeson setup build --buildtype=release\nmeson compile -C build\nmeson install -C build\n```\n\nRunning the first command will create a `build` directory in the root of the repository, which will contain all the\nbuild files. The second command will compile the library and the third command will install it to your system.\nWhen installing GridFire it will generate a `pkg-config` file which can be used to link against the library in other\nprojects.\n\n### Linking Against GridFire\nThe easiest way, by far, to link against GridFire is to use `pkg-config`. This will automatically handle all the\nlibrary and include flags for you. Further, the `pkg-config` file will also include the required information on\nthe libcomposition library so that you do not need to also manually link against it.\n\n```bash\ng++ -o main.cpp $(pkg-config --cflags --libs gridfire)\n```\n\n### Meson Wrap Installed Dependencies\nAside from Boost, GridFire dependes on a few other libraries which are not required to be installed on the system, but\nare instead downloaded and built as part of the GridFire build process. These are:\n- [CppAD](https://github.com/coin-or/CppAD): Used for automatic differentiation.\n- [libcomposition](https://github.com/4d-star/libcomposition): Used for composition of networks.\n- [libconfig](https://github.com/4d-star/libconfig): Used for configuration management.\n- [libconstants](https://github.com/4d-star/libconstants): Used for physical constants.\n- [liblogging](https://github.com/4d-star/liblogging): Used for logging.\n\nThese will all be downloaded and build automatically by meson when you run the `meson setup` and `meson compile` commands.\n\n## Usage\n\n> All code in GridFire is within the `gridfire` namespace. This means that you will need to use `gridfire::` prefix when\n> using any of the classes or functions in GridFire.\n\n> All code in lib* libraries is within the `fourdst::` namespace or subnamespaces of this (`fourdst::composition`,\n`fourdst::config`, etc...). This means that you will need to use `fourdst::` prefix when using any of the classes or\n> functions in these libraries.\n\nGridFire is designed to primarily interface with `fourdst::composition::Composition` objects (provided by libcomposition).\nThe idea is that you create a composition object which tracks some set of species and either their mass fractions or number\nfractions. You then initialize a network from this composition object. \n\nWhen evaluating the network you pass the current state of the composition object, the temperature, the density, and the \ncurrent energy of the system (along with some other parmeters such as the maximum time and the initial time step). Any\nnetwork implemented in GridFire will then use this information to evolve the network and return a `gridfire::NetOut` object\nwhich contains the updated state of the composition object, the new energy of the system, and the number of steps the\nsolver took to reach the final state.\n\nThere are a few networks currently implemented in GridFire.\n\n| Network Name               | Description                                                                                                                                                                             | Network Format Enum |\n|----------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------|\n| `gridfire::GraphNetwork`   | A general nuclear network which uses a directed hypergraph to represent the network topology. This is the main network implemented in GridFire and is the one you will most likely use. | `REACLIB`         |\n| `gridfire::StaticGraphNetwork` |  A less general version of `gridfire::GraphNetwork` which uses a static graph to represent the network topology. That is to say that new species cannot be added or removed after instatiation of the network. | `REACLIB_STATIC`  |\n| `gridfire::Approx8Network` | A specialized network for the approximate 8 species network used in stellar nucleosynthesis. This is a reimplimentation of the network developed by Frank Timmes' for MESA              | `APPROX8`          |\n| `gridfire::Network`        | A virtual base class for all networks in GridFire. This is not meant to be used directly; rather, all networks in GridFire should subclass `gridfire::Network` and implement the required `evaluate` method. | `DEFAULT`         |\n\nRegardless of the network you chose, the interface is the same. You will need to create a `gridfire::NetIn` object\nwhich contains the initial state of the network, including the composition, temperature, density, energy, initial time\nstep, and maximum time. You will then pass this object to the `evaluate` method of the network you chose. The `evaluate`\nmethod will return a `gridfire::NetOut` object which contains the updated state of the network.\n\nA simple example of how to use `gridfire::GraphNetwork` is shown below (note that `composition.h` is a header file\nprovided by libcomposition, which means your compiler must be able to find its header and library files. The pkg-config\nfile generated during the installation of GridFire will take care of this for you, so you can use `pkg-config` to\ncompile this example):\n\n```c++\n#include <gridfire/netgraph.h>\n#include <fourdst/composition/composition.h>\n\n#include <iostream>\n#include <vector>\n#include <string>\n\nint main() {\n    const std::vector<double> comp = {0.708, 2.94e-5, 0.276, 0.003, 0.0011, 9.62e-3, 1.62e-3, 5.16e-4};\n    const std::vector<std::string> symbols = {\"H-1\", \"He-3\", \"He-4\", \"C-12\", \"N-14\", \"O-16\", \"Ne-20\", \"Mg-24\"};\n\n    fourdst::composition::Composition composition;\n    \n    // true puts this in mass fraction mode. false would mean you must provide number fractions instead.\n    composition.registerSymbol(symbols, true); \n    \n    composition.setMassFraction(symbols, comp);\n    composition.finalize(true);\n\n    gridfire::NetIn netIn;\n    netIn.composition = composition;\n    netIn.temperature = 1e7; // In Kelvin\n    netIn.density = 1e2;     // In g/cm^3\n    netIn.energy = 0.0;      // Initial energy in erg\n\n    netIn.tMax = 3.15e17;    // In seconds\n    netIn.dt0 = 1e12;        // Initial time step in seconds\n\n    gridfire::GraphNetwork network(composition);\n    network.exportToDot(\"Network.dot\");\n    gridfire::NetOut netOut;\n    netOut = network.evaluate(netIn);\n    std::cout << netOut << std::endl;    \n}\n\n```\nSave that file to `main.cpp` and compile it with the following command:\n```bash\nclang++ main.cpp $(pkg-config --cflags --libs gridfire) -I/opt/homebrew/include -o main -std=c++23\n./main\n```\n> Note that here I have included the `-I/opt/homebrew/include` flag to specify the header location for boost\n> on my system. This very well may already be in your compiler's include path, or if not it might be in a different\n> location. That is all very system dependent. You can try to get a sense of where the boost headers are located\n> by looking at the `build/compile-commmands.json` file generate by meson after running `meson setup build`.\n\n \n> -std=c++23 or -std=c++20 is required as we use some C++20 feature in GridFire (specifically concepts). Compiling with\n> C++23 is **strongly** recommended.\n\nUsing a different network is as simple as changing the type of the `network` variable to the desired network type. For\nexample, if you wanted to use the `gridfire::Approx8Network`, you would change the line\n`gridfire::GraphNetwork network(composition);` to `gridfire::Approx8Network network(composition);`. The rest of the code\nwould remain the same.\n\nFor more details on how to use the composition library please refer to the libcomposition documentation.\n\n## Funding\nGridFire is a part of the 4D-STAR collaboration.\n\n4D-STAR is funded by European Research Council (ERC) under the Horizon Europe programme (Synergy Grant agreement No.\n101071505: 4D-STAR)\nWork for this project is funded by the European Union. Views and opinions expressed are however those of the author(s)\nonly and do not necessarily reflect those of the European Union or the European Research.\n"
                    }
                }
            },
            "PubPolishPy": {
                "type": "dir",
                "children": {
                    "readme.md": {
                        "type": "file",
                        "content": "<h1 align=\"center\"> PubPolishPy </h1>\n<p align=\"center\">\n  <img src=\"https://github.com/tboudreaux/PubPolishPy/blob/master/assets/logo/PubPolishLogo-Dark.png?raw=true\" alt=\"Logo of Project\">\n</p>\n\n# A Python framework for reorganizing tex documents for submission to different sources\nDifferent destinations for TeX documents often require (implicitly or explicitly) different\nstructures of a project. For example, I tend to organize all of my projects in the following structure\n\n\n```bash\n\u251c\u2500\u2500 makefile\n\u251c\u2500\u2500 SelfConsistentModelingOfNGC2808.aux\n\u251c\u2500\u2500 SelfConsistentModelingOfNGC2808.bbl\n\u251c\u2500\u2500 SelfConsistentModelingOfNGC2808.blg\n\u251c\u2500\u2500 SelfConsistentModelingOfNGC2808.log\n\u251c\u2500\u2500 SelfConsistentModelingOfNGC2808.out\n\u251c\u2500\u2500 SelfConsistentModelingOfNGC2808.pdf\n\u251c\u2500\u2500 src\n\u2502   \u251c\u2500\u2500 aasjournal.bst\n\u2502   \u251c\u2500\u2500 aassymbols.tex\n\u2502   \u251c\u2500\u2500 aastex631.cls\n\u2502   \u251c\u2500\u2500 appendicies\n\u2502   \u251c\u2500\u2500 bib\n\u2502   \u2502   \u2514\u2500\u2500 ms.bib\n\u2502   \u251c\u2500\u2500 figures\n\u2502   \u2502   \u251c\u2500\u2500 BestFit.png\n\u2502   \u2502   \u251c\u2500\u2500 BestFitResults.pdf\n\u2502   \u2502   \u251c\u2500\u2500 ClusterAnalysis.pdf\n\u2502   \u2502   \u251c\u2500\u2500 DistributionOfErrors.pdf\n\u2502   \u2502   \u251c\u2500\u2500 ExtractedIsoFit.pdf\n\u2502   \u2502   \u251c\u2500\u2500 HeliumMeanOffset.pdf\n\u2502   \u2502   \u251c\u2500\u2500 notebookFigures -> ../../FigureMakeing/Figures\n\u2502   \u2502   \u2514\u2500\u2500 photometricOffset.pdf\n\u2502   \u251c\u2500\u2500 ms.tex\n\u2502   \u251c\u2500\u2500 natbib.tex\n\u2502   \u251c\u2500\u2500 natnotes.tex\n\u2502   \u2514\u2500\u2500 sections\n\u2502       \u251c\u2500\u2500 AtmopshericModels.tex\n\u2502       \u251c\u2500\u2500 conclusion.tex\n\u2502       \u251c\u2500\u2500 fidanka.tex\n\u2502       \u251c\u2500\u2500 fitting.tex\n\u2502       \u251c\u2500\u2500 intro.tex\n\u2502       \u251c\u2500\u2500 modeling.tex\n\u2502       \u251c\u2500\u2500 observations.tex\n\u2502       \u2514\u2500\u2500 results.tex\n\n```\nThis structure is great for organization while writing the manuscript as it keeps sections separated. However, The Astrophysical Journal implicitly requires that all uploaded manuscripts be in a flat directory structure.\n\nWhile this is not technically challenging to manually update paths it is tedious. It is even more tedious when you have to do it multiple times during the peer review and copy editing process.\n\nPubPolishPy aims to resolve this challenge. \n\nCurrently, PubPolishPy recursively parses your LaTex souce and builds a graph of all of the local file dependencies it can find. These can be \"flattened\" into a directory structure. If you flatten them all the needed files will be copied from where there are to a new folder and all of the paths within the tex document will be updated to point there. Note, this is not an in place operation. <b>NO CHANGES WILL BE MADE TO YOUR ORIGINAL TEX SOURCE</b>. Rather, effectively completely new tex project is built from your existing project but with a different structure.\n\nMore Generally,PubPolishPy aims to provide a framework which destinations can be added into and can parse any tex project to any destination (such as MNRAS, ArXiV, ApJ, or other journals). This is done through the parsers module which implements a generic parser which other parsers can inherit from. Currently only ApJ and ArXiv are implemented.\n\n## Installation\nPubPolishPy may be installed from source. I hope to have it in PyPy soon\n\n```bash\ngit clone git@github.com:tboudreaux/PubPolishPy.git\ncd PubPolishPy\npip instal .\n```\n\nIf you wish to develop for PubPolishPy replace the final line with\n\n```bash\npip install -e .\n```\n\n## Usage\nPubPolishPy may be used through either a command line script or a function call.\n\nUsing pragmatically in python (based on the above example directory structure and assuming the user is in the root (where the makefile it))\n\n```python\nfrom PubPolishPy.parsers import TeXApJFormatter\n\nApJ = TeXApJFormatter(\"src/ms.tex\")\nApJ.migrate()\n```\n\nIf you want to invoke it from the command line use the following script\n\n```bash\npubPolish --target ApJ --dest ApJSubmission src/ms.tex\n```\nValid submission locations are defined in a dictionary which connects the key (ApJ in this case) to the class. The dest folder defines where the flattened project will end up. The script then runs effectively the same code as is presented above\n\n## Targets\nCurrently there are only two targets implemented as these are the targets which I use. If and when I submit to other targets I will build them in, otherwise I am very open to others submitting targets; however, I likely will not work on them spontaneously.\n| Target                       | Command Line Key | Formatter Object Name | Details                                                                                                                                                     |\n| ---------------------------- | ---------------- | --------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| The Astrophysical Journal    | ApJ              | TeXApJFormatter       | Flattens the latex directory and copies additional AASTeX files                                                                                             |\n| The ArXiv                    | ArXiv            | TeXArXivFormatter     | Flattens the latex directory, copies additional AASTeX files if available, changes the acknowledgments environment to the macro, downloads the aastex62.cls file if aastex631 is detected, sets the document class options to twocolumn (removes other options if present). |\n| Generic    | Generic              | TeXGenericFormatter       | Does not apply any additional logic.                                                                                             |\n\n\n## Example Makefile\nFor sake of completion I have included a makefile which I use and includes PubPolishPy. Note the make rules for the arxiv and ApJ\n\n```make\nLTC=\"pdflatex\"\nBTC=\"bibtex\"\n\nANAME=\"SelfConsistentModelingOfNGC2808\"\n\nSRCDIR=\"src/\"\nFIGDIR=\"src/figures\"\nBIBDIR=\"src/bibliography\"\nAPEDIR=\"src/appendicies\"\n\nApJDIR=\"ApJ\"\nArXivDIR=\"ArXiv\"\n\nMANFILE=\"ms.tex\"\nMANPATH=\"$(SRCDIR)/$(MANFILE)\"\nApJMANPATH=\"$(ApJDIR)/$(MANFILE)\"\nArXivMANPATH=\"$(ArXivDIR)/$(MANFILE)\"\n\n\nASSET_FILES = $(shell find ./src/ -regex '.*\\(tex\\|pdf\\)$')\n\n\nTFLAGS=\"-jobname=$(ANAME)\"\n\n.PHONY: manuscript apj arxiv clean veryclean\n\ndefault: manuscript\n\nall: manuscrip apj arxiv\n\nmanuscript: ./src/$(ASSET_FILES)\n        $(LTC) $(TFLAGS) $(MANPATH)\n        $(BTC) $(ANAME)\n        $(LTC) $(TFLAGS) $(MANPATH)\n        $(LTC) $(TFLAGS) $(MANPATH)\n\n\napj:\n        if [ -d \"ApJ\" ]; then rm -rf \"ApJ\"; fi\n        pubPolish --target ApJ --dest $(ApJDIR) $(MANPATH)\n        cd $(ApJDIR) && $(LTC) $(TFLAGS) $(MANFILE)\n        cd $(ApJDIR) && $(BTC) $(ANAME)\n        cd $(ApJDIR) && $(LTC) $(TFLAGS) $(MANFILE)\n        cd $(ApJDIR) && $(LTC) $(TFLAGS) $(MANFILE)\n\narxiv:\n        if [ -d \"ArXiv\" ]; then rm -rf \"ArXiv\"; fi\n        pubPolish --target ArXiv --dest $(ArXivDIR) $(MANPATH)\n        cd $(ArXivDIR) && $(LTC) $(TFLAGS) $(MANFILE)\n        cd $(ArXivDIR) && $(BTC) $(ANAME)\n        cd $(ArXivDIR) && $(LTC) $(TFLAGS) $(MANFILE)\n        cd $(ArXivDIR) && $(LTC) $(TFLAGS) $(MANFILE)\n\n\nclean:\n        -rm $(ANAME).blg\n        -rm $(ANAME).bbl\n        -rm $(ANAME).aux\n        -rm $(ANAME).log\n        -rm $(ANAME).out\n\nveryclean: clean\n        -rm $(ANAME).pdf\n```\n\n## Plugins\nRecognizing that every project is different and that it is infeasible for me to impliment a catch all system, PubPolishPy comes with a simple plugin system to allow users to define their own migration logic without diving into fully adding new target classes. \n\n### Building a Plugin\nLet us say that for your project, you want to flatten the directory structure and then after you want to replace all instances of the word foo with the word bar in every tex file. Below I will write a plugin that does this\n\n```python\nfrom PubPolishPy.parsers import TeXGenericFormatter\nfrom PubPolishPy.plugins import PubPolishPlugin\nimport re\n\nCustomPlugin(PubPolishPlugin):\n    def post_migrate(self):\n        for nodeName, nodeData in self.formatter.projectGraph.nodes(data=True):\n            if nodeData.get('tex', False) == True:\n                with open(self.formatter.updatedFilePaths[nodeName], 'r') as f:\n                    content = f.read()\n                newContent = re.sub('foo', 'bar', content)\n                with open(self.formatter.updatedFilePaths[nodeName], 'w') as f:\n                    f.write(newContent)\n\n    def pre_migration(self):\n        self.formatter.flatten() # If using the generic formatter then there is no default mogration logic between pre and post.\n        pass\n\nformatter = TeXGenericFormatter(\"src/main.tex\")\nformatter.register_plugin(CustomPlugin)\nformatter.migrate()\n```\n\nWithin formatter (or any child classes) pre_migrate methods will be called before the migration_logic method which all child classes must impliment while post_migrate methods will be called after migration_logic. ApJ and ArXiv targets impliment migration logic; however, the generic formatter simply passes when migration logic is called allowing any migration logic at all to be written using a plugin. Note that since there is nothing happening between pre and post migration for the generic formatter their names become somewhat confusing. The Key point is that pre always runs first then migration_logic() then post.\n\n"
                    }
                }
            },
            "mplEasyAnimate": {
                "type": "dir",
                "children": {
                    "makeAnimation.py": {
                        "type": "file",
                        "content": "import matplotlib.pyplot as plt\nimport matplotlib\nimport numpy as np\nfrom tqdm import tqdm\n\nimport cProfile\n\nfrom mplEasyAnimate import animation\n\ndef main():\n    figList = list()\n    filename = 'TestAnimation.mp4'\n    t = 20\n    N = 100\n\n    guass = np.random.normal(size=(t, 2, N))\n\n    anim = animation(filename)\n    for coord in guass:\n        print(f\"Adding frame to animation with mean data: {coord.mean()}\")\n        fig, ax = plt.subplots(1, 1, figsize=(10, 7))\n        ax.plot(coord[0], coord[1], 'o')\n        anim.add_frame(fig)\n        plt.close(fig)\n\n    anim.close()\n\nif __name__ == '__main__':\n    main()\n",
                        "run_output": [
                            {
                                "delay": 150,
                                "content": "Adding frame to animation with mean data: -0.0019317205504412493\n"
                            },
                            {
                                "delay": 150,
                                "content": "Adding frame to animation with mean data: 0.01599770903230734\n"
                            },
                            {
                                "delay": 150,
                                "content": "Adding frame to animation with mean data: 0.06326612895026075\n"
                            },
                            {
                                "delay": 150,
                                "content": "Adding frame to animation with mean data: 0.03539553943977265\n"
                            },
                            {
                                "delay": 150,
                                "content": "Adding frame to animation with mean data: 0.05521373272350415\n"
                            },
                            {
                                "delay": 150,
                                "content": "Adding frame to animation with mean data: 0.043857852828667374\n"
                            },
                            {
                                "delay": 150,
                                "content": "Adding frame to animation with mean data: -0.011650897043916602\n"
                            },
                            {
                                "delay": 150,
                                "content": "Adding frame to animation with mean data: -0.04443399362213839\n"
                            },
                            {
                                "delay": 150,
                                "content": "Adding frame to animation with mean data: 0.05443237467867891\n"
                            },
                            {
                                "delay": 150,
                                "content": "Adding frame to animation with mean data: 0.022342927814938726\n"
                            },
                            {
                                "delay": 150,
                                "content": "Adding frame to animation with mean data: 0.004707077388361309\n"
                            },
                            {
                                "delay": 150,
                                "content": "Adding frame to animation with mean data: 0.07337947107968672\n"
                            },
                            {
                                "delay": 150,
                                "content": "Adding frame to animation with mean data: -0.0001709251222228314\n"
                            },
                            {
                                "delay": 150,
                                "content": "Adding frame to animation with mean data: -0.03626718844243676\n"
                            },
                            {
                                "delay": 150,
                                "content": "Adding frame to animation with mean data: -0.026669611926900726\n"
                            },
                            {
                                "delay": 150,
                                "content": "Adding frame to animation with mean data: 0.030721998734882412\n"
                            },
                            {
                                "delay": 150,
                                "content": "Adding frame to animation with mean data: -0.03653680804913978\n"
                            },
                            {
                                "delay": 150,
                                "content": "Adding frame to animation with mean data: 0.14879576356760502\n"
                            },
                            {
                                "delay": 150,
                                "content": "Adding frame to animation with mean data: -0.0033821491041942865\n"
                            },
                            {
                                "delay": 150,
                                "content": "Adding frame to animation with mean data: 0.04236766109737556\n"
                            }
                        ]
                    },
                    "readme.md": {
                        "type": "file",
                        "content": "# What's New?\n - Added the ability to transition between added frames with either a cross dissolve (built in) or using a custom transition function\n - Added Ability to Change the Facecolor of the saved figure\n - Upaded the image loading away from scipy.misc to skimage\n\n# Super simple (and likely stupid) way of making animations with maptlotlib\n\nI wanted to make a plot, then I wanted that plot to move into another plot. That was hard to do, then I foung imageio. But that was slow cause I had to save every figure to disk, then I rememberd that memory existed, then it was faster. Now I have packeged this so it is super easy, now we are here.\n\n## Installation\nYou can either clone the repository and install it or install it via pip. Installing from the repository will get you the latest, possiblly broken, version. The pypi version is much more likley to be working, so if possible I recommend installing with pip.\n\n```bash\ngit clone https://github.com/tboudreaux/mpl_animate.git\ncd mpl_animate\npython setup.py install\n```\nor \n```bash\npip install mplEasyAnimate\n```\n\nalso you will need to install ffmpeg, find instructions for you OS of choice\n\n## API Documentation\nmplEasyAnimate has a relativley simple API, only making use of one (animation) class.\nThe API is however well documented in the code as well as <a href=\"https://algebrist.com/~tboudreaux/docs/mplEasyAnimate/index.html#\">here</a>\n\n## Adding Frames all at once (not recommended)\n\nmplEasyAnimate allow you to build up a list of matplotlib figures and turn them into an animation. You can send a full list in, this works well for small numbers of figures.\n\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom mplEasyAnimate import animation\n\nfigList = list()\nfilename = 'TestAnimation.mp4'\nt = 10\nN = 50\n\nguass = np.random.normal(size=(t, 2, N))\n\n\nfor coord in guass:\n    fig, ax = plt.subplots(1, 1, figsize=(10, 7))\n    ax.plot(coord[0], coord[1], 'o')\n    figList.append(fig)\n\nanim = animation(filename)\nanim.add_frames(figList)\nanim.close()\n```\n\nif you want to run this in jupyter the above example should be modified as follows\n\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom mplEasyAnimate import animation\n\nfigList = list()\nfilename = 'TestAnimation.mp4'\nt = 10\nN = 50\n\nguass = np.random.normal(size=(t, 2, N))\n\npit.ioff()\nfor coord in guass:\n    fig, ax = plt.subplots(1, 1, figsize=(10, 7))\n    ax.plot(coord[0], coord[1], 'o')\n    figList.append(fig)\n    \nanim = animation(filename, fps=30)\nanim.add_frames(figList)\nanim.close()\nplt.ion()\n```\n\nBasically this keeps jupyter from rendering every figure you make. Note that this is a bad way of making animations if you have more than say 20 frames as it will force your computer to store each of those figures. For animations with thousands of frames than can require more memory than can be allocated and cause your program to crash on an OSError.\n\n\n## Dynamically Adding Frames (sorta recommended)\nHowever, matplotlib will get uphappy if you have too many figures open at once. I reccomend that for more than say 10 figures you dynamically add them (the figures) to the animation instead of doing it all at the end. See below\n\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom mplEasyAnimate import animation\n\n\nfilename = 'TestAnimation.mp4'\nt = 100\nN = 50\n\nguass = np.random.normal(size=(t, 2, N))\n\nanim = animation(filename, fps=60)\nfor i, coord in enumerate(guass):\n    fig, ax = plt.subplots(1, 1, figsize=(10, 7))\n    ax.plot(coord[0], coord[1], 'o')\n    anim.add_frame(fig)\n    plt.close(fig)\n\nanim.close()\n```\n\nhere every 10 frames I add all the frames to the animation and then I flush the buffer at the end to make sure that the animation is readable.\n\n\n## Context Manager (very recommended)\nmplEasyAnimate can easily called using context managers which will take care of closing the files for you, here is an example\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom mplEasyAnimate import animation\n\n\nfilename = 'TestAnimation.mp4'\nt = 100\nN = 50\n\nguass = np.random.normal(size=(t, 2, N))\n\nwith animation(filename, fps=60) as anim:\n\tfor i, coord in enumerate(guass):\n\t\tfig, ax = plt.subplots(1, 1, figsize=(10, 7))\n\t\tax.plot(coord[0], coord[1], 'o')\n\t\tanim.add_frame(fig)\n\t\tplt.close(fig)\n\n```\n## Smoothing\nmplEasyAnimate can automatically apply a cross dissolve between frames. This is turned on with the autoSmoothing parameter to animation. There is also a smoothingFrames parameter which describes how many frames will be used to dissolve. Note that this smoothes the entire frame, not just the graphed data.\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom mplEasyAnimate import animation\n\n\nfilename = 'TestAnimation.mp4'\nt = 100\nN = 50\n\nguass = np.random.normal(size=(t, 2, N))\n\nwith animation(filename, fps=60, autoSmooth=True, smoothingFrame=60) as anim:\n\tfor i, coord in enumerate(guass):\n\t\tfig, ax = plt.subplots(1, 1, figsize=(10, 7))\n\t\tax.plot(coord[0], coord[1], 'o')\n\t\tanim.add_frame(fig)\n\t\tplt.close(fig)\n\n```\n\n## Saveing the Final Frame\nSometimes when you are giving a talk you want to transition to a slide where the image looks the same as the final frame of the animation; however, because mplEasyAnimate rescales some stuff internally just saving the figure with matplotlib won't provide a seemless transition. mplEasyAnimate allows you to save the final frame of an animation to a png which you can use to make these transitions smooth!\n\n```python\nwith animation(filename, fps=60, saveFinalFrame=True) as anim:\n\tfor i, coord in enumerate(guass):\n\t\tfig, ax = plt.subplots(1, 1, figsize=(10, 7))\n\t\tax.plot(coord[0], coord[1], 'o')\n\t\tanim.add_frame(fig)\n\t\tplt.close(fig)\n\n```\n\nThis will produce a file called \"finalFrame.png\" in your current working directory\n\n## Some Examples\nHere are some examples of output<br>\n![Alt Text](https://github.com/tboudreaux/mpl_animate/blob/master/examples/example.gif?raw=true)\n\nAnother example can be seen here, this shows three views of a the evolution of a Globular Cluster through a couple Mega Years <br>\n![Alt Text](https://github.com/tboudreaux/mpl_animate/blob/master/examples/ClusterAnimation.gif?raw=true)\n\nAn Example showing the developement of exoplanet statistics between the 90s and the 2020s (Credit: <a href=\"https://www.kerockcliffe.com/\">Keighley Rockcliffe</a>)\n\n\nhttps://user-images.githubusercontent.com/6620251/225698910-994ea8a3-496c-4331-9ddb-4acff3405f1f.mp4\n\n\n## Speed\nThere are some ways to get speed / preformance improvments when making an animation\n\n 1) Turn down the dpi, when you make an animation objects you can set the dpi as a keyword argument, lower dpis will render faster\n 2) Reuse the same figure, consider the following code and how it reuses the same figure instead of creating a new one for each frame\n\n```python\nnumber = 100\nrlayers = 100\n\ncirc, equib = make_circ(1, 1, number)\nanim = animation('Animations/DrawStar_{}x{}.mp4'.format(number, rlayers), fps=30, dpi=5)\nfig, ax = plt.subplots(1, 1, figsize=(10, 7))\nax.set_xlim(-1.1, 1.1)\nax.set_ylim(-1.1, 1.1)\nax.axis('off')\n\nfor particle in tqdm(range(1, number)):\n    ax.plot(circ[particle-1:particle+1, 0, 0, 0], circ[particle-1:particle+1, 0, 0, 1], 'C0o-', linewidth=1)\n\n    anim.add_frame(fig)\n\n\nd0 = np.pi/(rlayers/2)\nfor theta in tqdm(np.arange(d0, 2*np.pi-d0/2, d0)):\n    R = np.sqrt((circ[:, 0, 0, 0]**2) + (circ[:, 0, 0, 1]**2))\n    ax.plot(R*np.cos(theta), R*np.sin(theta), 'C0o-', linewidth=1)\n    \n    anim.add_frame(fig)\n    \nfor theta in tqdm(np.arange(d0, 2*np.pi+d0, d0)):\n    R = np.sqrt((circ[:, 0, 0, 0]**2) + (circ[:, 0, 0, 1]**2))\n    \n    x1, y1 = R*np.cos(theta), R*np.sin(theta)\n    x2, y2 = R*np.cos(theta+d0), R*np.sin(theta+d0)\n    ax.plot([x1, x2], [y1, y2], 'C0', linewidth=1)\n    anim.add_frame(fig)\n\nplt.close(fig)\nanim.close()\n```\n 3) turn off the axes, drawing the x and y axes is one of the slowest parts of matplotlib's drawing process, if they are not nessicairy for the animation consider turning them off (see the above code block).\n\n\n"
                    }
                }
            },
            "opat-core": {
                "type": "dir",
                "children": {
                    "makeOpat.py": {
                        "type": "file",
                        "content": "from opatio import OPAT\nfrom opatio.card.datacard import OPATTable\nimport numpy as np\n\nnp.random.seed(42)\nprint(\"Generating random OPAT data...\")\n\nopat = OPAT()\nopat.set_version(1)\nopat.set_source(\"test_source\")\nopat.set_comment(\"test_comment\")\nopat.set_numIndex(2)\n\n# Generate random data for the card\nnum_rows = 10\nnum_cols = 5\n\nnum_tables = 10\n\ncards = list()\nfor tableID in range(num_tables): \n    data = np.random.rand(num_rows, num_cols, 4).astype(np.float64)\n\n    column_values = np.random.rand(num_cols).astype(np.float64)\n    column_name = \"TC {}\".format(tableID)\n\n    row_values = np.random.rand(num_rows).astype(np.float64)\n    row_name = \"TR {}\".format(tableID)\n\n    index_vector = np.random.rand(2).astype(np.float64)\n\n    card = opat.add_table(index_vector, \"data\", column_values, row_values, data, columnName=column_name, rowName=row_name)\n    cards.append((index_vector, card))\n\nfor iv, card in cards:\n    squareTable = card[\"data\"].data**2\n    newTable = OPATTable(columnValues=card[\"data\"].columnValues, rowValues=card[\"data\"].rowValues, data=squareTable)\n    card.add_table(\"square\", newTable, columnName=\"TC2\", rowName=\"TR2\")\n    opat.add_card(iv, card)\n    break\n# Save the OPAT file\nprint(\"Saving OPAT data to files...\")\nopat.save_as_ascii(\"test.dat\")\n\n## Disabeld for profile\n# opat.save(\"test.opat\")\n\n",
                        "run_output": [
                            {
                                "delay": 150,
                                "content": "Generating random OPAT data...\n"
                            },
                            {
                                "delay": 150,
                                "content": "Saving OPAT data to files...\n"
                            }
                        ]
                    },
                    "readme.md": {
                        "type": "file",
                        "content": "<p align=\"center\">\n  <img src=\"assets/logo/opatCoreLogo.png\" width=\"300\" alt=\"OPAT Core Libraries Logo\">\n</p>\n\n<h1 align=\"center\">OPAT Core Libraries</h1>\n\n<p align=\"center\">\n  <a href=\"https://pypi.org/project/opatio/\"><img src=\"https://img.shields.io/pypi/v/opatio\" alt=\"PyPI - Version\"></a>\n  <a href=\"https://github.com/4D-STAR/opat-core/blob/main/LICENSE\"><img src=\"https://img.shields.io/github/license/4D-STAR/opat-core\" alt=\"GitHub License\"></a>\n  <a href=\"https://4d-star.github.io/opat-core/\"><img src=\"https://img.shields.io/badge/Documentation-View%20Here-blue\" alt=\"Documentation\"></a>\n</p>\n\n---\n\nThis repository contains the core C++ library, python module, and file specification for the OPAT file format. \n\nOPAT is a structured binary file format developed by the 4D-STAR collaboration for efficient and standardized storage of set of tabular data indexed by some floating point vector (such as composition).\n\nThe general principle behind OPAT is that an arbitrary number of data cards are stored, indexed by some arbitrary-length composition vector. Each data card contains an arbitrary number of data tables indexed by some string tag.\n\nThe provided python module can be used to create and read OPAT files while the C++ module is intended to be used to interface OPAT tables with C++ code for reading (but not currently generation).\n\n## Installation\nThis repository provides both C++ and python bindings. The first thing to note is that these do not depend on each other at all. If you want to generate OPAT tables and/or use them in python code you will want the python module. If you want to use OPAT tables in C++ code you will want the C++ module. \n\nThere are more details on usage for each language in their respective folder; however, broad installation instructions are included here as well.\n\n### Dependencies Overview\n\nBelow is a summary of the key dependencies for each part of the project.\n\n#### Python Dependencies\nThese are managed by `pip` and are listed in `opatIO-py/pyproject.toml`.\n\n| Dependency  | Minimum Version | Usage                                  | Source/Authors                                                                 |\n|-------------|-----------------|----------------------------------------|--------------------------------------------------------------------------------|\n| `numpy`     | `>= 1.21.1`     | Numerical operations, array handling   | [NumPy Developers](https://numpy.org/)                                         |\n| `xxhash`    | `>= 3.5.0`      | Fast hashing algorithms (internal use) | [Yann Collet (Cyan4973)](https://github.com/Cyan4973/xxHash)                   |\n| `scipy`     | `>= 1.15.0`     | Triangulation (for interpolation)      | [SciPy Developers](https://scipy.org/)                                         |\n\n#### C++ Dependencies\nMost C++ dependencies are handled via Meson's wrap system (built at compile time). Boost is an exception.\n\n| Dependency | Installation                                     | Usage                                                                 | Source/Authors                                                                                                                                                                     |\n|------------|--------------------------------------------------|-----------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Boost      | System install or via bundled script (prompts user) | Numerical linear algebra (`ublas`) in `TableLattice`                  | [Boost Community](https://www.boost.org/)                                                                                                                                          |\n| Qhull      | Meson wrap (built automatically)                 | N-dimensional Delaunay triangulation for `TableLattice`               | [Barber, C.B., Dobkin, D.P., and Huhdanpaa, H.T., \"The Quickhull algorithm for convex hulls,\" ACM Trans. on Mathematical Software, 22(4):469-483, Dec 1996](http://www.qhull.org/) |\n| xxHash     | Meson wrap (built automatically)                 | Fast hashing for `FloatIndexVector` lookups in `OPAT` class           | [Yann Collet (Cyan4973)](https://github.com/Cyan4973/xxHash) & [Stefan Brumme (stbrumme)](https://create.stephan-brumme.com/xxhash/)                                                                     \n| PicoSHA2   | Meson wrap (built automatically)                 | SHA-256 hashing for data integrity checks (`CardCatalogEntry`)        | [Shintarou Okada (okdshin)](https://github.com/okdshin/PicoSHA2)                                                                                                                             \n| cxxopts    | Meson wrap (built automatically)                 | Command-line option parsing for CLI tools (e.g., `opatHeader`)        | [Jarryd Beck (jarro2783)](https://github.com/jarro2783/cxxopts)                                                                                                                                \n\n### Python Installation\n```bash\npip install opatio\n```\n\n### C++ Installation\nYou will need `meson`, `cmake`, and `ninja` installed pre-installed. Note that cmake is needed in order to build subprojects which use CMake as their build system. *opat-core does not make use of CMake as a build system*. These can be installed with pip\n```bash\npip install \"meson>=1.6.0\"\npip install cmake\npip install ninja\n```\nThen you can build and install opat-core\n```bash\ngit clone https://github.com/4D-STAR/opat-core\ncd opat-core\nmeson setup build --buildtype=release\nmeson compile -C build\n```\nIf you want to run tests you can use meson's build in test command. Note that due to small numerical differences between computers and compilers, some tests may fail. This is expected and can be ignored. Specifically, `TableLattice` tests rely on the ordering / adjacency of Delaunay triangulation which can vary between systems.\n```bash\nmeson test -C build\n```\n\n\nTo install headers, libraries, the pkg_config file (`opatIO.pc`), and the command line utilities\n```bash\nmeson install -C build\n```\n\n---\n\n# Usage\n\n## Python Usage\nSee the `opatIO-py` directory for detailed installation and usage instructions. The Python module allows for both creating and reading OPAT files. A comprehensive API manual can also be found in `opatIO-py/docs/build/latex/opatio.pdf`.\n\nThe general workflow involves creating an `OPAT` object, adding tables to it, and then saving it.\n\n### Creating and Writing an OPAT File\n```python\nfrom opatio import OPAT\n\n# Initialize an OPAT object\nopacityFile = OPAT()\nopacityFile.set_comment(\"This is a sample opacity file\")\nopacityFile.set_source(\"OPLIB\") # Optional: set a source identifier\n\n# Assume you have your data:\n# X, Z: components of the index vector (e.g., Hydrogen and Metal mass fractions)\n# logR: 1D array of log(R) values (e.g., density variable)\n# logT: 1D array of log(T) values (e.g., temperature variable)\n# logKappa: 2D array of log(opacity) values, with shape (len(logR), len(logT))\nX, Z = 0.7, 0.02\nlogR = [1.0, 2.0, 3.0] \nlogT = [4.0, 5.0, 6.0, 7.0]\nlogKappa = [[1.1, 1.2, 1.3, 1.4], [2.1, 2.2, 2.3, 2.4], [3.1, 3.2, 3.3, 3.4]]\n\n\n# Add a table to a new DataCard, indexed by (X, Z)\n# The tag \"data\" identifies this specific table within the DataCard\ncard = opacityFile.add_table(index_vector=(X, Z), \n                             tag=\"data\", \n                             row_values=logR, \n                             col_values=logT, \n                             table_data=logKappa, \n                             rowName=\"logR\", \n                             columnName=\"logT\")\n\n# You can add another table to the same DataCard\n# For example, interpolation coefficients\n# xOrder, yOrder, coeff = ... (your coefficient data)\n# opacityFile.add_table(index_vector=(X,Z), tag=\"interp_coeffs\", \n#                       row_values=x_coeffs_indices, col_values=y_coeffs_indices, table_data=coeffs,\n#                       card=card) # Pass the existing card object\n\n# Save the OPAT file\nopacityFile.save(\"opacity.opat\")\n\n# Optionally, save an ASCII representation (for debugging or human-readable inspection)\nopacityFile.save_as_ascii(\"opacity_ascii.txt\")\n\nprint(\"OPAT file created and saved.\")\n```\n\n### Reading an OPAT File\n```python\nfrom opatio import read_opat\n\n# Load an existing OPAT file\nopacityFile = read_opat(\"opacity.opat\")\n\n# Print the header information\nprint(opacityFile.header)\n\n# Access a specific DataCard by its index vector\n# Note: Index vectors are tuples. For floating point comparisons, \n# direct dictionary-like access might require exact matches.\n# It's often better to iterate or use methods that handle floating point precision if needed.\n# For this example, we assume the index (0.7, 0.02) exists.\ntarget_index = (0.7, 0.02)\nif target_index in opacityFile.cards:\n    data_card = opacityFile.cards[target_index]\n    \n    # Access a specific table within the DataCard by its tag\n    if \"data\" in data_card.tables:\n        table = data_card.tables[\"data\"]\n        print(f\"\\nTable 'data' for index {target_index}:\")\n        print(f\"Row Names (logR): {table.row_values}\")\n        print(f\"Column Names (logT): {table.col_values}\")\n        print(f\"Table Data (logKappa):\\n{table.table_data}\")\n    else:\n        print(f\"Table 'data' not found in card with index {target_index}\")\nelse:\n    print(f\"DataCard with index {target_index} not found.\")\n\n# Iterate through all cards and their tables\nfor index_vec, card in opacityFile.cards.items():\n    print(f\"\\nDataCard at index: {index_vec}\")\n    for tag, table in card.tables.items():\n        print(f\"  Table tag: {tag}, Shape: ({table.num_rows}, {table.num_cols})\")\n```\n\n### Converting OPAL Type I to OPAT\nA utility is provided to convert common OPAL Type I opacity files to the OPAT format.\n```python\nfrom opatio.convert import OPALI_2_OPAT\n\n# Assuming an OPAL Type I file named \"GS98hz\" is in the current directory\nOPALI_2_OPAT(\"GS98hz\", \"gs98hz.opat\")\nprint(\"Converted OPAL Type I file to gs98hz.opat\")\n```\n\n## C++ Library/Header Usage\nThe C++ library is primarily designed for reading and interpolating data from OPAT files. Below are some common usage examples. For a more detailed API manual, refer to the Doxygen documentation generated in `opatIO-cpp/docs/html/index.html` (or the PDF version in `opatIO-cpp/docs/latex/refman.pdf`).\n\n### Linking the C++ Library\n\nThe installation process detailed above generate a package config file `opatIO.pc` that can be used to link against the\nC++ library. You can use this in your `CMakeLists.txt`, `meson.build` files, or directly in your compiler commands. \n\nas a simple example lets say you make a file called `main.cpp` with the following contents:\n```c++\n#include <opatIO.h>\n\nint main() {\n    opat::OPAT opat_file = opat::readOPAT(\"example.opat\");\n    std::cout << \"Successfully read OPAT file: example.opat\" << std::endl;\n}\n```\nif you were to just run\n```bash\ng++ main.cpp -o main\n```\nThis would fail because the compiler neither knows where to find the `opatIO.h` header file nor the `libopatio.a` library.\n\nHowever, if you use the `pkg-config` tool, you can easily compile and link against the OPAT library:\n```bash\ng++ main.cpp -o main $(pkg-config --cflags --libs opatIO) --std=c++23\n```\n\n> \u26a0\ufe0f The `--std=c++23` flag is required as the OPAT C++ library makes use of C++23 features. --std=c++17 is the minimum required version, but C++23 is recommended for full compatibility.\n> \n\n### C++ API Usage Examples\n\n#### Accessing a Table by Index and Tag\n\n```c++\n#include \"opatIO.h\"\n#include \"indexVector.h\" // For FloatIndexVector\n#include <string>\n#include <vector>\n#include <iostream>\n\nint main() {\n    std::string filename = \"example.opat\";\n    try {\n        opat::OPAT opat_file = opat::readOPAT(filename);\n        // Define the index vector for the DataCard you want to access\n        FloatIndexVector target_index({0.35, 0.004}); // Example index\n        // Define the tag for the table within the DataCard\n        std::string table_tag = \"data\"; // Example tag\n\n        const opat::DataCard& data_card = opat_file[target_index];\n        const opat::OPATTable& table = data_card[table_tag];\n        \n        std::cout << \"Table '\" << table_tag << \"' at index \" << target_index << \":\" << std::endl;\n        table.print(); // Print the table data\n    } catch (const std::exception& e) {\n        std::cerr << \"Error accessing table: \" << e.what() << std::endl;\n        return 1;\n    }\n    return 0;\n}\n```\n\n#### Slicing a Table\n```c++\n#include \"opatIO.h\"\n#include \"indexVector.h\"\n#include <string>\n#include <vector>\n#include <iostream>\n\nint main() {\n    std::string filename = \"example.opat\";\n    try {\n        opat::OPAT opat_file = opat::readOPAT(filename);\n        FloatIndexVector target_index({0.35, 0.004});\n        std::string table_tag = \"data\";\n\n        // Define slices for rows and columns\n        opat::Slice row_slice(0, 6);    // Rows 0 through 5\n        opat::Slice col_slice(25, 36);  // Columns 25 through 35\n\n        const opat::OPATTable& original_table = opat_file[target_index][table_tag];\n        opat::OPATTable sliced_table = original_table.slice(row_slice, col_slice);\n        \n        std::cout << \"Sliced table '\" << table_tag << \"' at index \" << target_index << \":\" << std::endl;\n        sliced_table.print(); // Print the sliced table\n    } catch (const std::exception& e) {\n        std::cerr << \"Error slicing table: \" << e.what() << std::endl;\n        return 1;\n    }\n    return 0;\n}\n```\n\n#### Using `TableLattice` for Interpolation\nThe `TableLattice` class allows for N-dimensional linear interpolation of data within an OPAT file.\n\n```c++\n#include \"opatIO.h\"\n#include \"indexVector.h\"\n#include \"tableLattice.h\" // For TableLattice\n#include <string>\n#include <vector>\n#include <iostream>\n\nint main() {\n    std::string opat_filename = \"your_data.opat\"; // Replace with your OPAT file\n    try {\n        opat::OPAT opat_data = opat::readOPAT(opat_filename);\n\n        // Initialize TableLattice with the loaded OPAT data\n        opat::lattice::TableLattice lattice(opat_data);\n        std::cout << \"TableLattice initialized.\" << std::endl;\n\n        // Define the index vector for which you want to interpolate data\n        // Ensure its dimension matches opat_data.header.numIndex\n        FloatIndexVector query_point({0.54, 0.07}); // Example for a 2D OPAT\n\n        // Get the interpolated DataCard\n        opat::DataCard interpolated_card = lattice.get(query_point);\n        std::cout << \"Interpolated DataCard retrieved for \" << query_point << std::endl;\n\n        // Access tables from the interpolated_card as needed\n        // For example, if your OPAT files contain a table tagged \"density\":\n        // if (!interpolated_card.getKeys().empty()) {\n        //     const opat::OPATTable& density_table = interpolated_card[interpolated_card.getKeys()[0]];\n        //     density_table.print();\n        // }\n\n    } catch (const std::exception& e) {\n        std::cerr << \"An error occurred: \" << e.what() << std::endl;\n        return 1;\n    }\n    return 0;\n}\n```\n\n## Command Line Utility Usage\nAfter running `meson install -C build`, three command-line utilities will be available in your system's path (you might need to resource your shell, e.g., `source ~/.bashrc` or `source ~/.zshrc`, or open a new terminal). These utilities are:\n\n1.  **`opatHeader`**: Prints out the main header information of an OPAT file.\n    ```bash\n    opatHeader --file path/to/your/file.opat\n    ```\n\n2.  **`opatInspect`**: Prints the main header and the card catalog (index of all data cards) of an OPAT file.\n    ```bash\n    opatInspect --file path/to/your/file.opat\n    ```\n\n3.  **`opatVerify`**: Verifies if the provided file is a valid OPAT file according to the specification. It checks the magic number and performs other integrity checks.\n    ```bash\n    opatVerify --file path/to/your/file.opat\n    ```\n\nNote the `--file` (or `-f`) flag is required before providing the path to the OPAT file for all tools.\n\n---\n\n## Fortran Usage\nA Fortran wrapper around the C++ `opatIO` module is provided. This interface allows Fortran applications to read data from OPAT files. Note that this is primarily for reading and may not receive the same level of feature development as the C++ and Python interfaces.\n\nThe Fortran module and object files are typically built into `build/opatIO-fortran/libopatio_f.a` (and associated `.mod` files in `build/opatIO-fortran/libopatio_f.a.p`). You will need to link against this library and potentially the C++ `opatIO` library as well.\n\nRefer to `opatIO-fortran/readme.md` and `opatIO-cpp/docs/static/fortran.md` for more details.\n\n### Example: Reading an OPAT File in Fortran\n\nThe core workflow involves:\n1. Loading the OPAT file using `load_opat_file`.\n2. Retrieving a specific table using `get_opat_table`.\n3. Checking the returned table structure for errors.\n4. Accessing table data.\n5. Freeing resources with `free_opat_file`.\n\n```fortran\nprogram opat_fortran_example\n    use opat_interface_module\n    use, intrinsic :: iso_c_binding\n    implicit none\n\n    character(len=256)      :: filename\n    real(c_double), target  :: index_vec(2) ! Assuming 2D index vector\n    character(len=32)       :: tag          ! Ensure tag length matches definition in module\n    type(opat_table_f_type) :: my_table\n    integer                 :: load_status\n    integer                 :: i, j\n\n    ! --- Configuration ---\n    filename = 'gs98hz.opat'  ! Ensure this file exists where the program is run\n                              ! A copy can be found in opatIO-cpp/examples\n    index_vec(1) = 0.9_c_double   ! Example X value\n    index_vec(2) = 0.08_c_double  ! Example Z value\n    tag = 'data'              ! Tag of the table to retrieve\n\n    ! --- Load OPAT File ---\n    print *, \"Attempting to load OPAT file: \", trim(filename)\n    load_status = load_opat_file(trim(filename))\n    if (load_status /= 0) then\n        print *, \"ERROR: Failed to load OPAT file. Status: \", load_status\n        stop 1\n    end if\n    print *, \"OPAT file loaded successfully.\"\n\n    ! --- Get Table ---\n    print *, \"Attempting to retrieve table with tag '\", trim(tag), \"' for index [\", index_vec(1), \",\", index_vec(2), \"]\"\n    call get_opat_table(index_vec, trim(tag), my_table)\n\n    ! --- Check for Errors and Process Table ---\n    if (my_table%error_code /= 0) then\n        print *, \"ERROR: Failed to retrieve table. Error code: \", my_table%error_code\n        if (my_table%error_code == 1) print *, \" (Likely cause: Index vector not found)\"\n        if (my_table%error_code == 2) print *, \" (Likely cause: Table tag not found for given index)\"\n    else\n        print *, \"Table retrieved successfully!\"\n        print *, \"Table dimensions: \", my_table%num_rows, \"rows, \", my_table%num_cols, \"cols\"\n\n        ! Check if pointers are associated (important!)\n        if (.not. c_associated(my_table%row_values)) then\n            print *, \"ERROR: Row values pointer not associated.\"\n        else if (.not. c_associated(my_table%col_values)) then\n            print *, \"ERROR: Column values pointer not associated.\"\n        else if (.not. c_associated(my_table%data)) then\n            print *, \"ERROR: Table data pointer not associated.\"\n        else\n            ! Access and print some data (example)\n            print *, \"First row value: \", my_table%row_values(1)\n            print *, \"First col value: \", my_table%col_values(1)\n            print *, \"Data at (1,1): \", my_table%data(1,1)\n\n            ! Example: Print a small part of the table\n            ! print *, \"Sample data:\"\n            ! do i = 1, min(my_table%num_rows, 3)\n            !    write(*,'(3(F8.3,X))') (my_table%data(i,j), j = 1, min(my_table%num_cols,3))\n            ! end do\n        end if\n    end if\n\n    ! --- Free OPAT File Resources ---\n    print *, \"Freeing OPAT file resources.\"\n    call free_opat_file()\n    print *, \"Program finished.\"\n\nend program opat_fortran_example\n```\n**Important Notes for Fortran Usage:**\n- Ensure the OPAT file (e.g., `gs98hz.opat`) is accessible in the directory where the Fortran executable is run.\n- Always check `my_table%error_code` after calling `get_opat_table`.\n- Crucially, call `free_opat_file()` when you are done with the OPAT file to prevent memory leaks.\n- The dimensions of `index_vec` must match the `numIndex` defined in the OPAT file's header.\n- The length of the `tag` character variable should be sufficient for the tags used in your OPAT files.\n\n"
                    },
                    "test.dat": {
                        "type": "file",
                        "content": "This is an ASCII representation of an OPAT file, it is not a valid OPAT file in and of itself.\nThis file is meant to be human readable and is not meant to be read by a computer.\nThe purpose of this file is to provide a human readable representation of the OPAT file which can be used for debugging purposes.\nThe full binary specification of the OPAT file can be found in the OPAT file format documentation at:\n https://github.com/4D-STAR/4DSSE/blob/main/specs/OPAT/OPAT.pdf\n=================================== HEADER ====================================\n>> OPAT\n>> Version: 1\n>> numCards: 10\n>> headerSize (bytes): 256\n>> Card Catalog Offset (bytes): 22440\n>> Creation Date: Jul 03, 2025\n>> Source Info: test_source\n>> Comment: test_comment\n>> numIndex: 2\n>> hashPrecision: 8\n===================================== DATA =====================================\n================================================================================\n======== START Data Card ========\n========== Card Header ==========\n>> Magic Number: CARD\n>> Number of Tables: 1\n>> Header Size: 256\n>> Index Offset: 1976\n>> Card Size: 2040\n>> Comment: \n======== Tables ========\n-------- Table 0 (tag: data) --------\n        |                0.3287                |                0.6725                |                0.7524                |                0.7916                |                0.7896               \n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n 0.0912 | < 0.7465,  0.6496,  0.8492,  0.6576> | < 0.5683,  0.0937,  0.3677,  0.2652> | < 0.2440,  0.9730,  0.3931,  0.8920> | < 0.6311,  0.7948,  0.5026,  0.5769> | < 0.4925,  0.1952,  0.7225,  0.2808>\n 0.4944 | < 0.0243,  0.6455,  0.1771,  0.9405> | < 0.9539,  0.9149,  0.3702,  0.0155> | < 0.9283,  0.4282,  0.9667,  0.9636> | < 0.8530,  0.2944,  0.3851,  0.8511> | < 0.3169,  0.1695,  0.5568,  0.9362>\n 0.0576 | < 0.6960,  0.5701,  0.0972,  0.6150> | < 0.9901,  0.1401,  0.5183,  0.8774> | < 0.7408,  0.6970,  0.7025,  0.3595> | < 0.2936,  0.8094,  0.8101,  0.8671> | < 0.9132,  0.5113,  0.5015,  0.7983>\n 0.5495 | < 0.6500,  0.7020,  0.7958,  0.8900> | < 0.3380,  0.3756,  0.0940,  0.5783> | < 0.0359,  0.4656,  0.5426,  0.2865> | < 0.5908,  0.0305,  0.0373,  0.8226> | < 0.3602,  0.1271,  0.5222,  0.7700>\n 0.4415 | < 0.2158,  0.6229,  0.0853,  0.0517> | < 0.5314,  0.5406,  0.6374,  0.7261> | < 0.9759,  0.5163,  0.3230,  0.7952> | < 0.2708,  0.4390,  0.0785,  0.0254> | < 0.9626,  0.8360,  0.6960,  0.4090>\n 0.8877 | < 0.1733,  0.1564,  0.2502,  0.5492> | < 0.7146,  0.6602,  0.2799,  0.9549> | < 0.7379,  0.5544,  0.6117,  0.4196> | < 0.2477,  0.3560,  0.7578,  0.0144> | < 0.1161,  0.0460,  0.0407,  0.8555>\n 0.3509 | < 0.7037,  0.4742,  0.0978,  0.4916> | < 0.4735,  0.1732,  0.4339,  0.3985> | < 0.6159,  0.6351,  0.0453,  0.3746> | < 0.6259,  0.5031,  0.8565,  0.6587> | < 0.1629,  0.0706,  0.6424,  0.0265>\n 0.1171 | < 0.5858,  0.9402,  0.5755,  0.3882> | < 0.6433,  0.4583,  0.5456,  0.9415> | < 0.3861,  0.9612,  0.9054,  0.1958> | < 0.0694,  0.1008,  0.0182,  0.0944> | < 0.6830,  0.0712,  0.3190,  0.8449>\n 0.1430 | < 0.0233,  0.8145,  0.2819,  0.1182> | < 0.6967,  0.6289,  0.8775,  0.7351> | < 0.8035,  0.2820,  0.1774,  0.7506> | < 0.8068,  0.9905,  0.4126,  0.3720> | < 0.7764,  0.3408,  0.9308,  0.8584>\n 0.7615 | < 0.4290,  0.7509,  0.7545,  0.1031> | < 0.9026,  0.5053,  0.8265,  0.3200> | < 0.8955,  0.3892,  0.0108,  0.9054> | < 0.0913,  0.3193,  0.9501,  0.9506> | < 0.5734,  0.6318,  0.4484,  0.2932>\n======== Card Index ========\ndata     |      256 |     1976 |        5 |       10 | TC 1     | TR 1     |        4\n========= END Data Card =========\n======== START Data Card ========\n========== Card Header ==========\n>> Magic Number: CARD\n>> Number of Tables: 1\n>> Header Size: 256\n>> Index Offset: 1976\n>> Card Size: 2040\n>> Comment: \n======== Tables ========\n-------- Table 0 (tag: data) --------\n        |                0.1072                |                0.4474                |                0.5326                |                0.2425                |                0.2692               \n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n 0.3773 | < 0.0841,  0.7010,  0.0728,  0.8219> | < 0.7062,  0.0813,  0.0848,  0.9866> | < 0.3743,  0.3706,  0.8128,  0.9472> | < 0.9860,  0.7534,  0.3763,  0.0835> | < 0.7771,  0.5584,  0.4242,  0.9064>\n 0.0201 | < 0.1112,  0.4926,  0.0114,  0.4687> | < 0.0563,  0.1188,  0.1175,  0.6492> | < 0.7460,  0.5834,  0.9622,  0.3749> | < 0.2857,  0.8686,  0.2236,  0.9632> | < 0.0122,  0.9699,  0.0432,  0.8911>\n 0.3221 | < 0.5277,  0.9930,  0.0738,  0.5539> | < 0.9693,  0.5231,  0.6294,  0.6957> | < 0.4545,  0.6276,  0.5843,  0.9012> | < 0.0454,  0.2810,  0.9504,  0.8903> | < 0.4557,  0.6201,  0.2774,  0.1881>\n 0.2114 | < 0.4637,  0.3534,  0.5837,  0.0777> | < 0.9744,  0.9862,  0.6982,  0.5361> | < 0.3095,  0.8138,  0.6847,  0.1626> | < 0.9109,  0.8225,  0.9498,  0.7257> | < 0.6134,  0.4182,  0.9327,  0.8661>\n 0.3275 | < 0.0452,  0.0264,  0.3765,  0.8106> | < 0.9873,  0.1504,  0.5941,  0.3809> | < 0.9699,  0.8421,  0.8383,  0.4687> | < 0.4148,  0.2734,  0.0564,  0.8647> | < 0.8129,  0.9997,  0.9966,  0.5554>\n 0.1198 | < 0.7690,  0.9448,  0.8496,  0.2473> | < 0.4505,  0.1292,  0.9541,  0.6062> | < 0.2286,  0.6717,  0.6181,  0.3582> | < 0.1136,  0.6716,  0.5203,  0.7723> | < 0.5202,  0.8522,  0.5519,  0.5609>\n 0.8905 | < 0.8767,  0.4035,  0.1340,  0.0288> | < 0.7551,  0.6203,  0.7041,  0.2130> | < 0.1364,  0.0145,  0.3506,  0.5899> | < 0.3922,  0.4375,  0.9042,  0.3483> | < 0.5140,  0.7837,  0.3965,  0.6221>\n 0.5936 | < 0.8624,  0.9495,  0.1471,  0.9266> | < 0.4921,  0.2582,  0.4591,  0.9800> | < 0.4926,  0.3288,  0.6334,  0.2401> | < 0.0759,  0.1289,  0.1280,  0.1519> | < 0.1388,  0.6409,  0.1819,  0.3457>\n 0.6791 | < 0.8968,  0.4740,  0.6676,  0.1723> | < 0.1923,  0.0409,  0.1689,  0.2786> | < 0.1770,  0.0887,  0.1206,  0.4608> | < 0.2063,  0.3643,  0.5034,  0.6904> | < 0.0393,  0.7994,  0.6279,  0.0818>\n 0.7892 | < 0.8736,  0.9209,  0.0611,  0.2769> | < 0.8062,  0.7483,  0.1845,  0.2093> | < 0.3705,  0.4845,  0.6183,  0.3689> | < 0.4625,  0.7475,  0.0367,  0.2524> | < 0.7133,  0.8952,  0.5117,  0.5321>\n======== Card Index ========\ndata     |      256 |     1976 |        5 |       10 | TC 2     | TR 2     |        4\n========= END Data Card =========\n======== START Data Card ========\n========== Card Header ==========\n>> Magic Number: CARD\n>> Number of Tables: 1\n>> Header Size: 256\n>> Index Offset: 1976\n>> Card Size: 2040\n>> Comment: \n======== Tables ========\n-------- Table 0 (tag: data) --------\n        |                0.7500                |                0.2099                |                0.8981                |                0.2051                |                0.1907               \n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n 0.0365 | < 0.5371,  0.5868,  0.7454,  0.4317> | < 0.1276,  0.2838,  0.3631,  0.6459> | < 0.5708,  0.3561,  0.9865,  0.6058> | < 0.2372,  0.1018,  0.1529,  0.2460> | < 0.1607,  0.1866,  0.2851,  0.1734>\n 0.4721 | < 0.8968,  0.0802,  0.5245,  0.4104> | < 0.9824,  0.1120,  0.3979,  0.9695> | < 0.8655,  0.8171,  0.2579,  0.1709> | < 0.6686,  0.9294,  0.5568,  0.5716> | < 0.2800,  0.7695,  0.1870,  0.3237>\n 0.5648 | < 0.4254,  0.5076,  0.2424,  0.1148> | < 0.6106,  0.2886,  0.5812,  0.1544> | < 0.4811,  0.5326,  0.0518,  0.3366> | < 0.1344,  0.0634,  0.9900,  0.3224> | < 0.8099,  0.2546,  0.6815,  0.7602>\n 0.0657 | < 0.5956,  0.4716,  0.4118,  0.3489> | < 0.9295,  0.8306,  0.9650,  0.1243> | < 0.7309,  0.9383,  0.1812,  0.0665> | < 0.7411,  0.5745,  0.8418,  0.1398> | < 0.7953,  0.2016,  0.1637,  0.1643>\n 0.7755 | < 0.8146,  0.6652,  0.5231,  0.3588> | < 0.8772,  0.3924,  0.8166,  0.4391> | < 0.3769,  0.4627,  0.3014,  0.7476> | < 0.5027,  0.2322,  0.8996,  0.3839> | < 0.5436,  0.9065,  0.6242,  0.1169>\n 0.4533 | < 0.9398,  0.6277,  0.3349,  0.1393> | < 0.7940,  0.6201,  0.5335,  0.8939> | < 0.7886,  0.1517,  0.3117,  0.2485> | < 0.7439,  0.0335,  0.5699,  0.7625> | < 0.8768,  0.3421,  0.8213,  0.1106>\n 0.5244 | < 0.8465,  0.1275,  0.3973,  0.7973> | < 0.1499,  0.2293,  0.7223,  0.7200> | < 0.6411,  0.6939,  0.5427,  0.2518> | < 0.3457,  0.1816,  0.9085,  0.5834> | < 0.4009,  0.4620,  0.9473,  0.1534>\n 0.4408 | < 0.5862,  0.5059,  0.6115,  0.0181> | < 0.8721,  0.9321,  0.5651,  0.6967> | < 0.9225,  0.7072,  0.1525,  0.5763> | < 0.6067,  0.4241,  0.7364,  0.9344> | < 0.9256,  0.4508,  0.1132,  0.9848>\n 0.4008 | < 0.8389,  0.1247,  0.9208,  0.8699> | < 0.5188,  0.5913,  0.3990,  0.0548> | < 0.3352,  0.8029,  0.0046,  0.3335> | < 0.3982,  0.5374,  0.9199,  0.3463> | < 0.3470,  0.7375,  0.4522,  0.2246>\n 0.5596 | < 0.4524,  0.1409,  0.1764,  0.4984> | < 0.4189,  0.9148,  0.3624,  0.5806> | < 0.6323,  0.0131,  0.6635,  0.1780> | < 0.9611,  0.1487,  0.4146,  0.0853> | < 0.9969,  0.5022,  0.5954,  0.0671>\n======== Card Index ========\ndata     |      256 |     1976 |        5 |       10 | TC 3     | TR 3     |        4\n========= END Data Card =========\n======== START Data Card ========\n========== Card Header ==========\n>> Magic Number: CARD\n>> Number of Tables: 1\n>> Header Size: 256\n>> Index Offset: 1976\n>> Card Size: 2040\n>> Comment: \n======== Tables ========\n-------- Table 0 (tag: data) --------\n        |                0.3546                |                0.2872                |                0.2963                |                0.2336                |                0.0421               \n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n 0.0179 | < 0.8618,  0.9461,  0.3733,  0.2707> | < 0.6440,  0.4087,  0.0254,  0.1562> | < 0.7160,  0.6589,  0.0271,  0.2220> | < 0.2311,  0.6719,  0.0197,  0.1041> | < 0.7999,  0.1785,  0.6527,  0.2382>\n 0.9877 | < 0.0994,  0.2432,  0.7223,  0.8557> | < 0.8302,  0.3972,  0.6681,  0.2050> | < 0.2931,  0.8963,  0.0130,  0.0855> | < 0.2079,  0.0265,  0.1814,  0.5830> | < 0.4214,  0.8927,  0.8174,  0.3418>\n 0.4278 | < 0.2594,  0.3797,  0.5903,  0.2681> | < 0.6241,  0.4094,  0.5520,  0.4361> | < 0.2945,  0.9485,  0.7636,  0.1401> | < 0.8685,  0.4874,  0.8946,  0.7999> | < 0.4252,  0.0225,  0.2687,  0.5416>\n 0.3843 | < 0.6335,  0.2579,  0.1394,  0.8349> | < 0.9844,  0.5257,  0.1717,  0.2723> | < 0.0184,  0.9143,  0.1178,  0.5765> | < 0.2741,  0.5542,  0.6514,  0.8297> | < 0.2064,  0.0110,  0.1369,  0.9000>\n 0.6796 | < 0.8739,  0.5974,  0.6005,  0.6650> | < 0.1754,  0.9144,  0.4188,  0.3831> | < 0.5189,  0.0470,  0.1663,  0.7380> | < 0.0828,  0.6032,  0.2453,  0.3893> | < 0.2887,  0.3557,  0.7190,  0.2971>\n 0.2183 | < 0.5664,  0.4761,  0.6637,  0.9368> | < 0.7326,  0.2149,  0.0312,  0.2623> | < 0.5951,  0.0514,  0.4964,  0.5968> | < 0.3342,  0.7709,  0.1066,  0.0751> | < 0.7282,  0.4955,  0.6884,  0.4348>\n 0.9500 | < 0.2464,  0.8191,  0.7994,  0.6947> | < 0.2721,  0.5902,  0.3610,  0.0916> | < 0.9173,  0.1368,  0.9502,  0.4460> | < 0.1851,  0.5419,  0.8729,  0.7322> | < 0.8066,  0.6588,  0.6923,  0.8492>\n 0.7863 | < 0.2497,  0.4894,  0.2212,  0.9877> | < 0.9441,  0.0394,  0.7056,  0.9252> | < 0.1806,  0.5679,  0.9155,  0.0339> | < 0.6974,  0.2973,  0.9244,  0.9711> | < 0.9443,  0.4742,  0.8620,  0.8445>\n 0.0894 | < 0.3191,  0.8289,  0.0370,  0.5963> | < 0.2300,  0.1206,  0.0770,  0.6963> | < 0.3399,  0.7248,  0.0654,  0.3153> | < 0.5395,  0.7907,  0.3188,  0.6259> | < 0.8860,  0.6159,  0.2330,  0.0244>\n 0.4176 | < 0.8701,  0.0213,  0.8747,  0.5289> | < 0.9391,  0.7988,  0.9979,  0.3507> | < 0.7672,  0.4019,  0.4799,  0.6275> | < 0.8737,  0.9841,  0.7683,  0.4178> | < 0.4214,  0.7376,  0.2388,  0.1105>\n======== Card Index ========\ndata     |      256 |     1976 |        5 |       10 | TC 4     | TR 4     |        4\n========= END Data Card =========\n======== START Data Card ========\n========== Card Header ==========\n>> Magic Number: CARD\n>> Number of Tables: 1\n>> Header Size: 256\n>> Index Offset: 1976\n>> Card Size: 2040\n>> Comment: \n======== Tables ========\n-------- Table 0 (tag: data) --------\n        |                0.5177                |                0.0879                |                0.3506                |                0.0332                |                0.0786               \n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n 0.3969 | < 0.4674,  0.6134,  0.1670,  0.9912> | < 0.2317,  0.9427,  0.6496,  0.6077> | < 0.5127,  0.2307,  0.1765,  0.2205> | < 0.1864,  0.7796,  0.3501,  0.0578> | < 0.9691,  0.8838,  0.9278,  0.9949>\n 0.1327 | < 0.1739,  0.3962,  0.7582,  0.6960> | < 0.1539,  0.8158,  0.2244,  0.2238> | < 0.5370,  0.5929,  0.5801,  0.0915> | < 0.8775,  0.2656,  0.1295,  0.8887> | < 0.9557,  0.8621,  0.8095,  0.6552>\n 0.5675 | < 0.5509,  0.0870,  0.4085,  0.3727> | < 0.2598,  0.7234,  0.4959,  0.0810> | < 0.2202,  0.6833,  0.0761,  0.8512> | < 0.4951,  0.4806,  0.5924,  0.8247> | < 0.3478,  0.6780,  0.5657,  0.2670>\n 0.6895 | < 0.8786,  0.7974,  0.6585,  0.8506> | < 0.8673,  0.7084,  0.8370,  0.6975> | < 0.6801,  0.6186,  0.7527,  0.1586> | < 0.8809,  0.8718,  0.0292,  0.8258> | < 0.1289,  0.3351,  0.7435,  0.1608>\n 0.8006 | < 0.8180,  0.8321,  0.5075,  0.0064> | < 0.2870,  0.6169,  0.9812,  0.6318> | < 0.2598,  0.6340,  0.5400,  0.7798> | < 0.1070,  0.7610,  0.5413,  0.9630> | < 0.3419,  0.6326,  0.9320,  0.1025>\n 0.2002 | < 0.9372,  0.6879,  0.0678,  0.3010> | < 0.7082,  0.0674,  0.5822,  0.3459> | < 0.6209,  0.0457,  0.8715,  0.9735> | < 0.9689,  0.7497,  0.1301,  0.7583> | < 0.0246,  0.0221,  0.3236,  0.4886>\n 0.1675 | < 0.7704,  0.6833,  0.4459,  0.2736> | < 0.9971,  0.4262,  0.4514,  0.1636> | < 0.7948,  0.6937,  0.2208,  0.0824> | < 0.6805,  0.6545,  0.2733,  0.9509> | < 0.1511,  0.4323,  0.9436,  0.4197>\n 0.1046 | < 0.6385,  0.3976,  0.2742,  0.9840> | < 0.4093,  0.8941,  0.2300,  0.2131> | < 0.0311,  0.6517,  0.3685,  0.8644> | < 0.4732,  0.9682,  0.1855,  0.8686> | < 0.7766,  0.7709,  0.8448,  0.7610>\n 0.6364 | < 0.6262,  0.1312,  0.0325,  0.9208> | < 0.6167,  0.7965,  0.4815,  0.1173> | < 0.1252,  0.6856,  0.4303,  0.2005> | < 0.4916,  0.0642,  0.5820,  0.2690> | < 0.7976,  0.3104,  0.4552,  0.0116>\n 0.7065 | < 0.0724,  0.3925,  0.4799,  0.6000> | < 0.2917,  0.6950,  0.8601,  0.7799> | < 0.0396,  0.4805,  0.1049,  0.2420> | < 0.9867,  0.1425,  0.4989,  0.6182> | < 0.7025,  0.5596,  0.0098,  0.3265>\n======== Card Index ========\ndata     |      256 |     1976 |        5 |       10 | TC 5     | TR 5     |        4\n========= END Data Card =========\n======== START Data Card ========\n========== Card Header ==========\n>> Magic Number: CARD\n>> Number of Tables: 1\n>> Header Size: 256\n>> Index Offset: 1976\n>> Card Size: 2040\n>> Comment: \n======== Tables ========\n-------- Table 0 (tag: data) --------\n        |                0.0256                |                0.3412                |                0.3802                |                0.3988                |                0.5802               \n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n 0.5336 | < 0.0520,  0.5413,  0.7091,  0.8710> | < 0.7141,  0.8017,  0.3395,  0.8148> | < 0.0801,  0.8948,  0.5476,  0.8173> | < 0.4523,  0.6436,  0.5264,  0.7316> | < 0.0816,  0.0604,  0.2471,  0.1595>\n 0.6079 | < 0.8718,  0.2192,  0.9759,  0.3369> | < 0.1821,  0.7897,  0.6587,  0.4982> | < 0.5554,  0.7192,  0.2285,  0.9963> | < 0.9748,  0.6503,  0.1995,  0.6802> | < 0.0722,  0.0307,  0.2577,  0.4626>\n 0.7649 | < 0.8683,  0.7272,  0.7427,  0.4255> | < 0.3459,  0.3710,  0.9876,  0.0401> | < 0.8670,  0.5787,  0.4386,  0.7253> | < 0.4867,  0.8734,  0.9007,  0.4217> | < 0.2768,  0.5924,  0.9124,  0.2107>\n 0.8130 | < 0.6230,  0.6316,  0.7331,  0.1316> | < 0.7158,  0.9090,  0.1797,  0.2375> | < 0.9714,  0.1810,  0.8544,  0.4923> | < 0.2472,  0.8707,  0.4453,  0.5148> | < 0.3592,  0.5930,  0.1635,  0.3911>\n 0.7181 | < 0.9694,  0.2581,  0.6567,  0.3252> | < 0.7735,  0.1309,  0.9698,  0.4538> | < 0.2361,  0.0735,  0.1698,  0.5198> | < 0.3370,  0.8289,  0.4309,  0.2487> | < 0.6171,  0.7068,  0.1670,  0.1676>\n 0.9555 | < 0.0367,  0.7364,  0.6638,  0.4746> | < 0.8442,  0.8057,  0.5854,  0.8683> | < 0.2058,  0.1119,  0.2697,  0.0571> | < 0.5312,  0.9366,  0.0393,  0.1221> | < 0.4522,  0.9339,  0.3162,  0.5072>\n 0.0182 | < 0.0416,  0.1483,  0.9866,  0.9651> | < 0.0049,  0.9518,  0.6391,  0.8679> | < 0.4547,  0.5156,  0.4888,  0.6669> | < 0.1397,  0.0300,  0.3079,  0.7047> | < 0.2019,  0.6734,  0.9699,  0.0939>\n 0.1958 | < 0.6726,  0.4438,  0.8681,  0.1771> | < 0.6926,  0.8381,  0.9446,  0.6832> | < 0.4972,  0.6178,  0.8689,  0.5706> | < 0.0304,  0.9309,  0.6895,  0.6765> | < 0.2157,  0.6589,  0.3939,  0.6512>\n 0.0076 | < 0.1066,  0.6578,  0.9994,  0.0482> | < 0.9772,  0.4069,  0.8708,  0.7824> | < 0.5670,  0.7384,  0.8785,  0.4041> | < 0.3270,  0.6676,  0.8078,  0.7623> | < 0.7978,  0.4356,  0.8178,  0.1202>\n 0.6475 | < 0.5445,  0.0058,  0.3246,  0.3665> | < 0.3962,  0.6955,  0.3886,  0.4487> | < 0.2375,  0.3733,  0.2273,  0.0732> | < 0.6034,  0.6682,  0.6195,  0.4635> | < 0.3798,  0.8633,  0.5191,  0.4792>\n======== Card Index ========\ndata     |      256 |     1976 |        5 |       10 | TC 6     | TR 6     |        4\n========= END Data Card =========\n======== START Data Card ========\n========== Card Header ==========\n>> Magic Number: CARD\n>> Number of Tables: 1\n>> Header Size: 256\n>> Index Offset: 1976\n>> Card Size: 2040\n>> Comment: \n======== Tables ========\n-------- Table 0 (tag: data) --------\n        |                0.2392                |                0.1422                |                0.1214                |                0.3033                |                0.1010               \n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n 0.6922 | < 0.9270,  0.0603,  0.9344,  0.3516> | < 0.1014,  0.4859,  0.2568,  0.2849> | < 0.3073,  0.8030,  0.5392,  0.3113> | < 0.6103,  0.7162,  0.2726,  0.4135> | < 0.1219,  0.1811,  0.6811,  0.1814>\n 0.0623 | < 0.5252,  0.7090,  0.1069,  0.5673> | < 0.2566,  0.9629,  0.4835,  0.8060> | < 0.5502,  0.0434,  0.6332,  0.9514> | < 0.6016,  0.8192,  0.8842,  0.2281> | < 0.2120,  0.6110,  0.4110,  0.8399>\n 0.5094 | < 0.9000,  0.3534,  0.2369,  0.7805> | < 0.2748,  0.8226,  0.4237,  0.6675> | < 0.0955,  0.6239,  0.4518,  0.5866> | < 0.1680,  0.7369,  0.8628,  0.2167> | < 0.0957,  0.0236,  0.6420,  0.6071>\n 0.9967 | < 0.5467,  0.2319,  0.3909,  0.5945> | < 0.4968,  0.9878,  0.1364,  0.6951> | < 0.4043,  0.4282,  0.7176,  0.6924> | < 0.9913,  0.1284,  0.1041,  0.7243> | < 0.5784,  0.2742,  0.0794,  0.0857>\n 0.8140 | < 0.8942,  0.1919,  0.3234,  0.2267> | < 0.3550,  0.0694,  0.5191,  0.0676> | < 0.8004,  0.2337,  0.5400,  0.8801> | < 0.6509,  0.5330,  0.3243,  0.3330> | < 0.6695,  0.9941,  0.6618,  0.5578>\n 0.6152 | < 0.7307,  0.4652,  0.0601,  0.5623> | < 0.9576,  0.1753,  0.6900,  0.2009> | < 0.5358,  0.0967,  0.4504,  0.7562> | < 0.3476,  0.6649,  0.7954,  0.9272> | < 0.2346,  0.3993,  0.1524,  0.9925>\n 0.3063 | < 0.9270,  0.5400,  0.8420,  0.5210> | < 0.6236,  0.0891,  0.7553,  0.1277> | < 0.8261,  0.7820,  0.7087,  0.0362> | < 0.3031,  0.2631,  0.3601,  0.0876> | < 0.9370,  0.5538,  0.3055,  0.3970>\n 0.6239 | < 0.4472,  0.6006,  0.5157,  0.9194> | < 0.4970,  0.9922,  0.8514,  0.2085> | < 0.9306,  0.1164,  0.8174,  0.3806> | < 0.8780,  0.8681,  0.8059,  0.7900> | < 0.3047,  0.0809,  0.4030,  0.1735>\n 0.5270 | < 0.6950,  0.3461,  0.9756,  0.6410> | < 0.8225,  0.1325,  0.8620,  0.9228> | < 0.4871,  0.6063,  0.7648,  0.1748> | < 0.5026,  0.3987,  0.1464,  0.3675> | < 0.0682,  0.0258,  0.1352,  0.9631>\n 0.4261 | < 0.5495,  0.9658,  0.4325,  0.3118> | < 0.5061,  0.4395,  0.1057,  0.6408> | < 0.2160,  0.6196,  0.6502,  0.1520> | < 0.0613,  0.7808,  0.4598,  0.0582> | < 0.9949,  0.0578,  0.6950,  0.9837>\n======== Card Index ========\ndata     |      256 |     1976 |        5 |       10 | TC 7     | TR 7     |        4\n========= END Data Card =========\n======== START Data Card ========\n========== Card Header ==========\n>> Magic Number: CARD\n>> Number of Tables: 1\n>> Header Size: 256\n>> Index Offset: 1976\n>> Card Size: 2040\n>> Comment: \n======== Tables ========\n-------- Table 0 (tag: data) --------\n        |                0.2698                |                0.8250                |                0.4983                |                0.0771                |                0.0586               \n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n 0.3342 | < 0.4498,  0.1946,  0.3678,  0.4141> | < 0.8275,  0.7336,  0.7693,  0.0110> | < 0.4162,  0.4813,  0.0192,  0.2598> | < 0.7603,  0.1371,  0.5353,  0.2152> | < 0.0121,  0.2412,  0.9759,  0.8015>\n 0.7849 | < 0.9596,  0.4879,  0.1097,  0.5480> | < 0.4544,  0.8444,  0.0981,  0.4882> | < 0.1500,  0.3247,  0.7374,  0.4760> | < 0.3759,  0.3945,  0.4594,  0.7850> | < 0.8921,  0.9553,  0.7869,  0.3154>\n 0.7077 | < 0.6881,  0.4376,  0.2547,  0.8409> | < 0.0384,  0.9018,  0.4615,  0.6372> | < 0.6594,  0.8951,  0.6367,  0.6139> | < 0.0667,  0.5184,  0.1502,  0.7374> | < 0.5122,  0.6802,  0.0417,  0.0848>\n 0.7886 | < 0.7163,  0.0721,  0.0713,  0.0121> | < 0.9565,  0.7375,  0.3533,  0.2965> | < 0.3497,  0.7747,  0.6614,  0.1852> | < 0.1741,  0.0984,  0.6603,  0.7644> | < 0.2650,  0.0209,  0.0822,  0.9679>\n 0.5173 | < 0.2954,  0.7692,  0.6247,  0.3819> | < 0.2057,  0.1214,  0.6150,  0.7746> | < 0.6439,  0.5303,  0.0420,  0.9685> | < 0.7987,  0.2928,  0.9800,  0.6019> | < 0.5824,  0.7481,  0.8118,  0.6565>\n 0.4402 | < 0.1281,  0.3383,  0.9281,  0.2246> | < 0.3722,  0.4321,  0.4394,  0.6129> | < 0.9431,  0.2407,  0.1215,  0.1975> | < 0.8869,  0.6458,  0.2859,  0.8159> | < 0.8614,  0.8465,  0.9189,  0.2522>\n 0.1475 | < 0.7550,  0.4605,  0.8420,  0.7285> | < 0.7764,  0.6562,  0.1774,  0.5450> | < 0.9847,  0.9374,  0.0432,  0.1648> | < 0.1317,  0.7260,  0.8178,  0.2135> | < 0.5059,  0.8407,  0.7328,  0.5422>\n 0.3282 | < 0.5903,  0.5084,  0.2975,  0.5650> | < 0.6889,  0.8733,  0.6363,  0.7611> | < 0.1601,  0.4616,  0.0093,  0.2467> | < 0.7265,  0.9918,  0.0992,  0.4015> | < 0.8001,  0.2040,  0.5551,  0.7331>\n 0.4340 | < 0.6160,  0.1880,  0.3554,  0.7838> | < 0.5542,  0.0052,  0.7610,  0.0353> | < 0.7457,  0.2025,  0.9581,  0.3679> | < 0.3269,  0.1489,  0.3056,  0.8767> | < 0.9963,  0.3683,  0.4486,  0.7221>\n 0.0886 | < 0.8862,  0.5930,  0.3915,  0.4126> | < 0.6956,  0.0032,  0.6196,  0.3555> | < 0.7942,  0.0930,  0.5882,  0.4810> | < 0.6423,  0.0649,  0.5800,  0.5615> | < 0.5607,  0.6035,  0.6765,  0.8050>\n======== Card Index ========\ndata     |      256 |     1976 |        5 |       10 | TC 8     | TR 8     |        4\n========= END Data Card =========\n======== START Data Card ========\n========== Card Header ==========\n>> Magic Number: CARD\n>> Number of Tables: 1\n>> Header Size: 256\n>> Index Offset: 1976\n>> Card Size: 2040\n>> Comment: \n======== Tables ========\n-------- Table 0 (tag: data) --------\n        |                0.8260                |                0.1006                |                0.2399                |                0.1420                |                0.3479               \n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n 0.4504 | < 0.7357,  0.9983,  0.9331,  0.6426> | < 0.4212,  0.6362,  0.7857,  0.1183> | < 0.4099,  0.8398,  0.3838,  0.5719> | < 0.5878,  0.1845,  0.3622,  0.3345> | < 0.0262,  0.0242,  0.8317,  0.2731>\n 0.7488 | < 0.5181,  0.2987,  0.9407,  0.2593> | < 0.4297,  0.8727,  0.8419,  0.1861> | < 0.8026,  0.4582,  0.4830,  0.1335> | < 0.0806,  0.7279,  0.4965,  0.4369> | < 0.7295,  0.7655,  0.1589,  0.6102>\n 0.6511 | < 0.1354,  0.7514,  0.6570,  0.9566> | < 0.0690,  0.0571,  0.2822,  0.2617> | < 0.2470,  0.9063,  0.2495,  0.2719> | < 0.7594,  0.4497,  0.7767,  0.0654> | < 0.4876,  0.0336,  0.0627,  0.9064>\n 0.6209 | < 0.1392,  0.5324,  0.4111,  0.3473> | < 0.8998,  0.0218,  0.6638,  0.9634> | < 0.5602,  0.9368,  0.0523,  0.4188> | < 0.2602,  0.7308,  0.9813,  0.2565> | < 0.6542,  0.1981,  0.5653,  0.4639>\n 0.3524 | < 0.9720,  0.6085,  0.3495,  0.1141> | < 0.1512,  0.2253,  0.2510,  0.8506> | < 0.5612,  0.5234,  0.1148,  0.8601> | < 0.7228,  0.0677,  0.7078,  0.5435> | < 0.0817,  0.4583,  0.4847,  0.1658>\n 0.8414 | < 0.9457,  0.8500,  0.6690,  0.4623> | < 0.4118,  0.6510,  0.5454,  0.0623> | < 0.5125,  0.8064,  0.4592,  0.0520> | < 0.7863,  0.2014,  0.2586,  0.1647> | < 0.3302,  0.7568,  0.5194,  0.2049>\n 0.4713 | < 0.8778,  0.8796,  0.8706,  0.2388> | < 0.4512,  0.9850,  0.7720,  0.0272> | < 0.0652,  0.4639,  0.9092,  0.5387> | < 0.4978,  0.1055,  0.6568,  0.8221> | < 0.3804,  0.7756,  0.9645,  0.2038>\n 0.9791 | < 0.5233,  0.2871,  0.7929,  0.5776> | < 0.6346,  0.7979,  0.3960,  0.9151> | < 0.5330,  0.1580,  0.6959,  0.7933> | < 0.3168,  0.8572,  0.9061,  0.2769> | < 0.9835,  0.1407,  0.2020,  0.1842>\n 0.6341 | < 0.8940,  0.6543,  0.1521,  0.4403> | < 0.6153,  0.0835,  0.8824,  0.8036> | < 0.5052,  0.9671,  0.4178,  0.9841> | < 0.6679,  0.6347,  0.1660,  0.8819> | < 0.4275,  0.1622,  0.0126,  0.5598>\n 0.1263 | < 0.5274,  0.7194,  0.8903,  0.0794> | < 0.7315,  0.1874,  0.8582,  0.8191> | < 0.5408,  0.7102,  0.3144,  0.4712> | < 0.8216,  0.4593,  0.3578,  0.4942> | < 0.8282,  0.3352,  0.1738,  0.7120>\n======== Card Index ========\ndata     |      256 |     1976 |        5 |       10 | TC 9     | TR 9     |        4\n========= END Data Card =========\n======== START Data Card ========\n========== Card Header ==========\n>> Magic Number: CARD\n>> Number of Tables: 2\n>> Header Size: 256\n>> Index Offset: 3696\n>> Card Size: 3824\n>> Comment: \n======== Tables ========\n-------- Table 0 (tag: data) --------\n        |                0.6420                |                0.0841                |                0.1616                |                0.8986                |                0.6064               \n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n 0.0092 | < 0.3745,  0.9507,  0.7320,  0.5987> | < 0.1560,  0.1560,  0.0581,  0.8662> | < 0.6011,  0.7081,  0.0206,  0.9699> | < 0.8324,  0.2123,  0.1818,  0.1834> | < 0.3042,  0.5248,  0.4319,  0.2912>\n 0.1015 | < 0.6119,  0.1395,  0.2921,  0.3664> | < 0.4561,  0.7852,  0.1997,  0.5142> | < 0.5924,  0.0465,  0.6075,  0.1705> | < 0.0651,  0.9489,  0.9656,  0.8084> | < 0.3046,  0.0977,  0.6842,  0.4402>\n 0.6635 | < 0.1220,  0.4952,  0.0344,  0.9093> | < 0.2588,  0.6625,  0.3117,  0.5201> | < 0.5467,  0.1849,  0.9696,  0.7751> | < 0.9395,  0.8948,  0.5979,  0.9219> | < 0.0885,  0.1960,  0.0452,  0.3253>\n 0.0051 | < 0.3887,  0.2713,  0.8287,  0.3568> | < 0.2809,  0.5427,  0.1409,  0.8022> | < 0.0746,  0.9869,  0.7722,  0.1987> | < 0.0055,  0.8155,  0.7069,  0.7290> | < 0.7713,  0.0740,  0.3585,  0.1159>\n 0.1608 | < 0.8631,  0.6233,  0.3309,  0.0636> | < 0.3110,  0.3252,  0.7296,  0.6376> | < 0.8872,  0.4722,  0.1196,  0.7132> | < 0.7608,  0.5613,  0.7710,  0.4938> | < 0.5227,  0.4275,  0.0254,  0.1079>\n 0.5487 | < 0.0314,  0.6364,  0.3144,  0.5086> | < 0.9076,  0.2493,  0.4104,  0.7556> | < 0.2288,  0.0770,  0.2898,  0.1612> | < 0.9297,  0.8081,  0.6334,  0.8715> | < 0.8037,  0.1866,  0.8926,  0.5393>\n 0.6919 | < 0.8074,  0.8961,  0.3180,  0.1101> | < 0.2279,  0.4271,  0.8180,  0.8607> | < 0.0070,  0.5107,  0.4174,  0.2221> | < 0.1199,  0.3376,  0.9429,  0.3232> | < 0.5188,  0.7030,  0.3636,  0.9718>\n 0.6520 | < 0.9624,  0.2518,  0.4972,  0.3009> | < 0.2848,  0.0369,  0.6096,  0.5027> | < 0.0515,  0.2786,  0.9083,  0.2396> | < 0.1449,  0.4895,  0.9857,  0.2421> | < 0.6721,  0.7616,  0.2376,  0.7282>\n 0.2243 | < 0.3678,  0.6323,  0.6335,  0.5358> | < 0.0903,  0.8353,  0.3208,  0.1865> | < 0.0408,  0.5909,  0.6776,  0.0166> | < 0.5121,  0.2265,  0.6452,  0.1744> | < 0.6909,  0.3867,  0.9367,  0.1375>\n 0.7122 | < 0.3411,  0.1135,  0.9247,  0.8773> | < 0.2579,  0.6600,  0.8172,  0.5552> | < 0.5297,  0.2419,  0.0931,  0.8972> | < 0.9004,  0.6331,  0.3390,  0.3492> | < 0.7260,  0.8971,  0.8871,  0.7799>\n-------- Table 1 (tag: square) --------\n        |                0.6420                |                0.0841                |                0.1616                |                0.8986                |                0.6064               \n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n 0.0092 | < 0.1403,  0.9039,  0.5358,  0.3584> | < 0.0243,  0.0243,  0.0034,  0.7503> | < 0.3613,  0.5014,  0.0004,  0.9407> | < 0.6930,  0.0451,  0.0331,  0.0336> | < 0.0926,  0.2754,  0.1866,  0.0848>\n 0.1015 | < 0.3744,  0.0195,  0.0853,  0.1342> | < 0.2080,  0.6165,  0.0399,  0.2644> | < 0.3510,  0.0022,  0.3691,  0.0291> | < 0.0042,  0.9004,  0.9324,  0.6535> | < 0.0928,  0.0095,  0.4682,  0.1937>\n 0.6635 | < 0.0149,  0.2452,  0.0012,  0.8269> | < 0.0670,  0.4389,  0.0972,  0.2705> | < 0.2989,  0.0342,  0.9401,  0.6008> | < 0.8827,  0.8007,  0.3575,  0.8499> | < 0.0078,  0.0384,  0.0020,  0.1058>\n 0.0051 | < 0.1511,  0.0736,  0.6868,  0.1273> | < 0.0789,  0.2945,  0.0199,  0.6435> | < 0.0056,  0.9739,  0.5964,  0.0395> | < 0.0000,  0.6650,  0.4996,  0.5315> | < 0.5949,  0.0055,  0.1285,  0.0134>\n 0.1608 | < 0.7449,  0.3885,  0.1095,  0.0040> | < 0.0967,  0.1057,  0.5323,  0.4065> | < 0.7871,  0.2230,  0.0143,  0.5087> | < 0.5788,  0.3150,  0.5944,  0.2438> | < 0.2732,  0.1828,  0.0006,  0.0116>\n 0.5487 | < 0.0010,  0.4050,  0.0988,  0.2586> | < 0.8237,  0.0621,  0.1684,  0.5709> | < 0.0523,  0.0059,  0.0840,  0.0260> | < 0.8643,  0.6531,  0.4012,  0.7594> | < 0.6459,  0.0348,  0.7967,  0.2909>\n 0.6919 | < 0.6520,  0.8030,  0.1011,  0.0121> | < 0.0520,  0.1824,  0.6691,  0.7409> | < 0.0000,  0.2609,  0.1742,  0.0493> | < 0.0144,  0.1140,  0.8891,  0.1045> | < 0.2691,  0.4942,  0.1322,  0.9444>\n 0.6520 | < 0.9263,  0.0634,  0.2473,  0.0905> | < 0.0811,  0.0014,  0.3716,  0.2527> | < 0.0027,  0.0776,  0.8249,  0.0574> | < 0.0210,  0.2396,  0.9715,  0.0586> | < 0.4518,  0.5801,  0.0565,  0.5303>\n 0.2243 | < 0.1353,  0.3998,  0.4014,  0.2871> | < 0.0082,  0.6977,  0.1029,  0.0348> | < 0.0017,  0.3492,  0.4591,  0.0003> | < 0.2622,  0.0513,  0.4162,  0.0304> | < 0.4774,  0.1496,  0.8775,  0.0189>\n 0.7122 | < 0.1163,  0.0129,  0.8551,  0.7697> | < 0.0665,  0.4356,  0.6679,  0.3082> | < 0.2805,  0.0585,  0.0087,  0.8050> | < 0.8108,  0.4008,  0.1149,  0.1219> | < 0.5270,  0.8048,  0.7869,  0.6082>\n======== Card Index ========\ndata     |      256 |     1976 |        5 |       10 | TC 0     | TR 0     |        4\nsquare   |     1976 |     3696 |        5 |       10 | TC2      | TR2      |        4\n========= END Data Card =========\n==================================== INDEX =====================================\nIndex 0  | Index 1  | Byte Start      Byte End        Checksum (SHA-256)\n================================================================================\n0.237249 | 0.325400 | 18616           22440           b'eU+U\\x03I\\xbf\\x86\\xff\\n\\xac\\x9d\\xf6\\x0b\\x0b\\xa8'...\n0.618218 | 0.101123 | 256             2296            b'1kU\\xcb\\x7f.\\x19\\xd1\\xcc\\xd5hr\\xa3\\xc2\\x06\\x11'...\n0.498442 | 0.086920 | 2296            4336            b'\\x92\\xd6\\x80\\xad\\xb6Ju\\x90 \\xec\\xd4\\t\\xb4\\x93{\\xb1'...\n0.155240 | 0.181928 | 4336            6376            b']MJ\\x16U:)\\x08\\x16\\x1a\\xab\\x90\\x04\\xa9\\x1b7'...\n0.879118 | 0.944732 | 6376            8416            b'\\xb7\\xe19\\xd7\\x8dk\\xce\\x7f\\xa67\\x92\\x07\\x11:f\\x8b'...\n0.031586 | 0.936212 | 8416            10456           b'\\xc9\\xcb\\xf8l)\\xa6\\t\\x97L\\x10yo\\xc4\\x90\\xa3a'...\n0.898031 | 0.243482 | 10456           12496           b\"\\x19H\\xc5'B\\x87T\\xcb/'2\\x82\\xf5\\xe6uk\"...\n0.130710 | 0.886604 | 12496           14536           b'\\xae\\x976\\x8e\\xf2\\xf5#,\\xa8\\xbb\\t9\\xf3\\xa3\\xd8U'...\n0.220612 | 0.598225 | 14536           16576           b'\\xb7\\x94\\xff\\x9dzU\\xe1i\\xdc\\xaf\\x99}\\x95\\xf0\\x94\\xab'...\n0.676178 | 0.325104 | 16576           18616           b'\\xca@J\\xbb9\\xac\\x1fN\\xe2(\\xde\\x9d\\xa1\\x0b9{'...\n"
                    }
                }
            },
            "readme.txt": {
                "type": "file",
                "content": "cd into a project to see more info on it!\n"
            },
            "splitAxes": {
                "type": "dir",
                "children": {
                    "readme.md": {
                        "type": "file",
                        "content": "![version](https://badgen.net/pypi/v/splitAxes)\n# Simple Split X axes for matplotlib\n\nUse gridspec to generate nxm grids of figures where the x axis on each figure\nmay be an split arbitrary number of times.\n\nThe axes object presented by this package is similar (though not identical) to\nthe axes object presented by matplotlib. This allows for a good amount of plotting\ncode to be directly ported.\n\n## Installation\n\n### From source\n ```bash\n git clone https://github.com/tboudreaux/splitAxes.git\n cd splitAxes\n pip instal -e .\n ```\n### From PyPi\n ```bash\n pip install splitAxes\n ```\n\n## Examples\n```python\nfrom splitAxes import split_grid\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfigRows = 2\nfigColums = 2\n\n# this is a matrix of size rows x colums. Each entry in the matrix is the number of splits (NOT the number of final panels, which will be 1 + the number of splits) to generate\n\nsplitMatrix=np.array([[3,1],[0,2]])\n\nfig, axs = split_grid(figRows, figColums, splitMatrix, figsize=(15,7))\n\n# Example Data\nX = np.linspace(-10,50, 1000)\nY = np.exp(-(X-0)**2) + np.exp(-(X-10)**2) + np.exp(-(X-20)**2)\n\naxs[0,0].set_xlim(0,45)\naxs[0,0].set_ylabel(\"Bob\")\naxs[1,0].plot(X,Y, color='green')\naxs[1,1].scatter([0,3,4],[5,4,2])\naxs[0,1].set_xlabel(\"Dave\", position=\"manual\", labelpos=0.67)\n\naxs[1,0].fill_between([0,10], 0.3, alpha=0.5, color='blue')\n\nplt.show()\n```\n\nThis should produce an output that looks something like\n\n![Example Output](tests/ExampleOutput.png?raw=true \"Example Output\")\n\n"
                    }
                }
            }
        }
    },
    "readme.txt": {
        "type": "file",
        "content": "# Emily M. Boudreaux (they/she)\n\n## About Me\n\nI am a Postdoctoral Research Associate and an Astronomy Lecturer at Dartmouth College. My work is centered on computational astrophysics, with a specific focus on the stellar evolution of low-mass and cool stars. Currently, I am contributing to the ERC Synergy Grant 4D-STAR under the guidance of Aaron Dotter.\n\nMy research involves analyzing the chemical composition of globular clusters and developing advanced numerical tools to improve stellar evolution models.\n\n## Background\n\n- **Ph.D. in Physics & Astronomy** | Dartmouth College (2024)\n  - Advisor: Dr. Brian C. Chaboyer\n  - Thesis: \"Models of Low Mass Stars as Physical Laboratories\"\n\n- **B.S. in Computational Physics** | High Point University (2019)\n\n## Projects & Interests\n\n- **Blog:** I run [astrobugs.com](http://astrobugs.com), a blog dedicated to exploring advanced computer science topics for graduate students in astronomy.\n\n- **Hobbies:** Outside of astrophysics, I enjoy theater tech and carpentry, I used to voluntere at Encore Stage & Studio. I am also an avid Star Trek fan.\n\n## Contact\n\n- **Email:** emily@boudreauxmail.com\n- **GitHub:** https://github.com/tboudreaux\n\n"
    }
}
};
